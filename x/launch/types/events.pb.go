// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/launch/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventChainCreated struct {
	LaunchId           uint64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,2,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
	CoordinatorId      uint64 `protobuf:"varint,3,opt,name=coordinator_id,json=coordinatorId,proto3" json:"coordinator_id,omitempty"`
}

func (m *EventChainCreated) Reset()         { *m = EventChainCreated{} }
func (m *EventChainCreated) String() string { return proto.CompactTextString(m) }
func (*EventChainCreated) ProtoMessage()    {}
func (*EventChainCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{0}
}
func (m *EventChainCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainCreated.Merge(m, src)
}
func (m *EventChainCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventChainCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainCreated proto.InternalMessageInfo

func (m *EventChainCreated) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventChainCreated) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

func (m *EventChainCreated) GetCoordinatorId() uint64 {
	if m != nil {
		return m.CoordinatorId
	}
	return 0
}

type EventRequestCreated struct {
	Creator string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Request Request `protobuf:"bytes,2,opt,name=request,proto3" json:"request"`
}

func (m *EventRequestCreated) Reset()         { *m = EventRequestCreated{} }
func (m *EventRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventRequestCreated) ProtoMessage()    {}
func (*EventRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{1}
}
func (m *EventRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequestCreated.Merge(m, src)
}
func (m *EventRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequestCreated proto.InternalMessageInfo

func (m *EventRequestCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventRequestCreated) GetRequest() Request {
	if m != nil {
		return m.Request
	}
	return Request{}
}

type EventRequestSettled struct {
	LaunchId  uint64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Approved  bool   `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (m *EventRequestSettled) Reset()         { *m = EventRequestSettled{} }
func (m *EventRequestSettled) String() string { return proto.CompactTextString(m) }
func (*EventRequestSettled) ProtoMessage()    {}
func (*EventRequestSettled) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{2}
}
func (m *EventRequestSettled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRequestSettled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRequestSettled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRequestSettled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequestSettled.Merge(m, src)
}
func (m *EventRequestSettled) XXX_Size() int {
	return m.Size()
}
func (m *EventRequestSettled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequestSettled.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequestSettled proto.InternalMessageInfo

func (m *EventRequestSettled) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventRequestSettled) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *EventRequestSettled) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

type EventGenesisAccountAdded struct {
	LaunchId           uint64                                   `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Address            string                                   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Coins              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	CoordinatorAddress string                                   `protobuf:"bytes,4,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
}

func (m *EventGenesisAccountAdded) Reset()         { *m = EventGenesisAccountAdded{} }
func (m *EventGenesisAccountAdded) String() string { return proto.CompactTextString(m) }
func (*EventGenesisAccountAdded) ProtoMessage()    {}
func (*EventGenesisAccountAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{3}
}
func (m *EventGenesisAccountAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGenesisAccountAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGenesisAccountAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGenesisAccountAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGenesisAccountAdded.Merge(m, src)
}
func (m *EventGenesisAccountAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventGenesisAccountAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGenesisAccountAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventGenesisAccountAdded proto.InternalMessageInfo

func (m *EventGenesisAccountAdded) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventGenesisAccountAdded) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventGenesisAccountAdded) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *EventGenesisAccountAdded) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

type EventVestingAccountAdded struct {
	LaunchId           uint64         `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Address            string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	VestingOptions     VestingOptions `protobuf:"bytes,3,opt,name=vesting_options,json=vestingOptions,proto3" json:"vesting_options"`
	CoordinatorAddress string         `protobuf:"bytes,4,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
}

func (m *EventVestingAccountAdded) Reset()         { *m = EventVestingAccountAdded{} }
func (m *EventVestingAccountAdded) String() string { return proto.CompactTextString(m) }
func (*EventVestingAccountAdded) ProtoMessage()    {}
func (*EventVestingAccountAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{4}
}
func (m *EventVestingAccountAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventVestingAccountAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventVestingAccountAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventVestingAccountAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventVestingAccountAdded.Merge(m, src)
}
func (m *EventVestingAccountAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventVestingAccountAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventVestingAccountAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventVestingAccountAdded proto.InternalMessageInfo

func (m *EventVestingAccountAdded) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventVestingAccountAdded) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventVestingAccountAdded) GetVestingOptions() VestingOptions {
	if m != nil {
		return m.VestingOptions
	}
	return VestingOptions{}
}

func (m *EventVestingAccountAdded) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

type EventValidatorAdded struct {
	LaunchId           uint64     `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Address            string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	GenTx              []byte     `protobuf:"bytes,3,opt,name=genTx,proto3" json:"genTx,omitempty"`
	ConsPubKey         []byte     `protobuf:"bytes,4,opt,name=consPubKey,proto3" json:"consPubKey,omitempty"`
	SelfDelegation     types.Coin `protobuf:"bytes,5,opt,name=selfDelegation,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"selfDelegation"`
	Peer               Peer       `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer"`
	HasProject         bool       `protobuf:"varint,7,opt,name=has_project,json=hasProject,proto3" json:"has_project,omitempty"`
	ProjectId          uint64     `protobuf:"varint,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CoordinatorAddress string     `protobuf:"bytes,9,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
}

func (m *EventValidatorAdded) Reset()         { *m = EventValidatorAdded{} }
func (m *EventValidatorAdded) String() string { return proto.CompactTextString(m) }
func (*EventValidatorAdded) ProtoMessage()    {}
func (*EventValidatorAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{5}
}
func (m *EventValidatorAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValidatorAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValidatorAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValidatorAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValidatorAdded.Merge(m, src)
}
func (m *EventValidatorAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventValidatorAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValidatorAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventValidatorAdded proto.InternalMessageInfo

func (m *EventValidatorAdded) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventValidatorAdded) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventValidatorAdded) GetGenTx() []byte {
	if m != nil {
		return m.GenTx
	}
	return nil
}

func (m *EventValidatorAdded) GetConsPubKey() []byte {
	if m != nil {
		return m.ConsPubKey
	}
	return nil
}

func (m *EventValidatorAdded) GetSelfDelegation() types.Coin {
	if m != nil {
		return m.SelfDelegation
	}
	return types.Coin{}
}

func (m *EventValidatorAdded) GetPeer() Peer {
	if m != nil {
		return m.Peer
	}
	return Peer{}
}

func (m *EventValidatorAdded) GetHasProject() bool {
	if m != nil {
		return m.HasProject
	}
	return false
}

func (m *EventValidatorAdded) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *EventValidatorAdded) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

type EventAccountRemoved struct {
	Address            string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LaunchId           uint64 `protobuf:"varint,2,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	CoordinatorAddress string `protobuf:"bytes,3,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
}

func (m *EventAccountRemoved) Reset()         { *m = EventAccountRemoved{} }
func (m *EventAccountRemoved) String() string { return proto.CompactTextString(m) }
func (*EventAccountRemoved) ProtoMessage()    {}
func (*EventAccountRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{6}
}
func (m *EventAccountRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAccountRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAccountRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAccountRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAccountRemoved.Merge(m, src)
}
func (m *EventAccountRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventAccountRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAccountRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventAccountRemoved proto.InternalMessageInfo

func (m *EventAccountRemoved) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventAccountRemoved) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventAccountRemoved) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

type EventValidatorRemoved struct {
	GenesisValidatorAccount string `protobuf:"bytes,1,opt,name=genesis_validator_account,json=genesisValidatorAccount,proto3" json:"genesis_validator_account,omitempty"`
	LaunchId                uint64 `protobuf:"varint,2,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	HasProject              bool   `protobuf:"varint,3,opt,name=has_project,json=hasProject,proto3" json:"has_project,omitempty"`
	ProjectId               uint64 `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CoordinatorAddress      string `protobuf:"bytes,5,opt,name=coordinator_address,json=coordinatorAddress,proto3" json:"coordinator_address,omitempty"`
}

func (m *EventValidatorRemoved) Reset()         { *m = EventValidatorRemoved{} }
func (m *EventValidatorRemoved) String() string { return proto.CompactTextString(m) }
func (*EventValidatorRemoved) ProtoMessage()    {}
func (*EventValidatorRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{7}
}
func (m *EventValidatorRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValidatorRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValidatorRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValidatorRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValidatorRemoved.Merge(m, src)
}
func (m *EventValidatorRemoved) XXX_Size() int {
	return m.Size()
}
func (m *EventValidatorRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValidatorRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_EventValidatorRemoved proto.InternalMessageInfo

func (m *EventValidatorRemoved) GetGenesisValidatorAccount() string {
	if m != nil {
		return m.GenesisValidatorAccount
	}
	return ""
}

func (m *EventValidatorRemoved) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventValidatorRemoved) GetHasProject() bool {
	if m != nil {
		return m.HasProject
	}
	return false
}

func (m *EventValidatorRemoved) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *EventValidatorRemoved) GetCoordinatorAddress() string {
	if m != nil {
		return m.CoordinatorAddress
	}
	return ""
}

type EventParamChanged struct {
	LaunchId uint64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Module   string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Param    string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Value    []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EventParamChanged) Reset()         { *m = EventParamChanged{} }
func (m *EventParamChanged) String() string { return proto.CompactTextString(m) }
func (*EventParamChanged) ProtoMessage()    {}
func (*EventParamChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{8}
}
func (m *EventParamChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventParamChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventParamChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventParamChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventParamChanged.Merge(m, src)
}
func (m *EventParamChanged) XXX_Size() int {
	return m.Size()
}
func (m *EventParamChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_EventParamChanged.DiscardUnknown(m)
}

var xxx_messageInfo_EventParamChanged proto.InternalMessageInfo

func (m *EventParamChanged) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventParamChanged) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *EventParamChanged) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *EventParamChanged) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type EventLaunchTriggered struct {
	LaunchId        uint64    `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	LaunchTimestamp time.Time `protobuf:"bytes,2,opt,name=launch_timestamp,json=launchTimestamp,proto3,stdtime" json:"launch_timestamp"`
}

func (m *EventLaunchTriggered) Reset()         { *m = EventLaunchTriggered{} }
func (m *EventLaunchTriggered) String() string { return proto.CompactTextString(m) }
func (*EventLaunchTriggered) ProtoMessage()    {}
func (*EventLaunchTriggered) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{9}
}
func (m *EventLaunchTriggered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLaunchTriggered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLaunchTriggered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLaunchTriggered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLaunchTriggered.Merge(m, src)
}
func (m *EventLaunchTriggered) XXX_Size() int {
	return m.Size()
}
func (m *EventLaunchTriggered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLaunchTriggered.DiscardUnknown(m)
}

var xxx_messageInfo_EventLaunchTriggered proto.InternalMessageInfo

func (m *EventLaunchTriggered) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func (m *EventLaunchTriggered) GetLaunchTimestamp() time.Time {
	if m != nil {
		return m.LaunchTimestamp
	}
	return time.Time{}
}

type EventLaunchReverted struct {
	LaunchId uint64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (m *EventLaunchReverted) Reset()         { *m = EventLaunchReverted{} }
func (m *EventLaunchReverted) String() string { return proto.CompactTextString(m) }
func (*EventLaunchReverted) ProtoMessage()    {}
func (*EventLaunchReverted) Descriptor() ([]byte, []int) {
	return fileDescriptor_77edfc7ac1bf5356, []int{10}
}
func (m *EventLaunchReverted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLaunchReverted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLaunchReverted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLaunchReverted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLaunchReverted.Merge(m, src)
}
func (m *EventLaunchReverted) XXX_Size() int {
	return m.Size()
}
func (m *EventLaunchReverted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLaunchReverted.DiscardUnknown(m)
}

var xxx_messageInfo_EventLaunchReverted proto.InternalMessageInfo

func (m *EventLaunchReverted) GetLaunchId() uint64 {
	if m != nil {
		return m.LaunchId
	}
	return 0
}

func init() {
	proto.RegisterType((*EventChainCreated)(nil), "network.launch.v1.EventChainCreated")
	proto.RegisterType((*EventRequestCreated)(nil), "network.launch.v1.EventRequestCreated")
	proto.RegisterType((*EventRequestSettled)(nil), "network.launch.v1.EventRequestSettled")
	proto.RegisterType((*EventGenesisAccountAdded)(nil), "network.launch.v1.EventGenesisAccountAdded")
	proto.RegisterType((*EventVestingAccountAdded)(nil), "network.launch.v1.EventVestingAccountAdded")
	proto.RegisterType((*EventValidatorAdded)(nil), "network.launch.v1.EventValidatorAdded")
	proto.RegisterType((*EventAccountRemoved)(nil), "network.launch.v1.EventAccountRemoved")
	proto.RegisterType((*EventValidatorRemoved)(nil), "network.launch.v1.EventValidatorRemoved")
	proto.RegisterType((*EventParamChanged)(nil), "network.launch.v1.EventParamChanged")
	proto.RegisterType((*EventLaunchTriggered)(nil), "network.launch.v1.EventLaunchTriggered")
	proto.RegisterType((*EventLaunchReverted)(nil), "network.launch.v1.EventLaunchReverted")
}

func init() { proto.RegisterFile("network/launch/v1/events.proto", fileDescriptor_77edfc7ac1bf5356) }

var fileDescriptor_77edfc7ac1bf5356 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0x4e, 0xe2, 0x4c, 0x42, 0x4a, 0xb6, 0x81, 0x6e, 0x82, 0xba, 0x0e, 0x96, 0x50,
	0x43, 0xa5, 0xee, 0xca, 0xe6, 0xd6, 0x5b, 0x1c, 0x2a, 0x14, 0x81, 0x54, 0x6b, 0x1b, 0xf5, 0xc0,
	0xc5, 0x1a, 0xef, 0xbe, 0xae, 0x87, 0x7a, 0x77, 0xb6, 0x33, 0xb3, 0x4b, 0x73, 0x07, 0xa9, 0xc7,
	0x9e, 0x39, 0xf6, 0x84, 0x7a, 0x2a, 0x12, 0x7f, 0x44, 0x8f, 0x15, 0x27, 0x24, 0xa4, 0x06, 0x25,
	0x42, 0xfd, 0x1f, 0xe0, 0x82, 0xe6, 0xc7, 0x1a, 0xbb, 0xae, 0x63, 0x13, 0x35, 0x97, 0xc4, 0xef,
	0x7d, 0x6f, 0xf6, 0x7d, 0xf3, 0xde, 0xf7, 0x66, 0x06, 0xb9, 0x29, 0x88, 0xef, 0x29, 0x7b, 0xe8,
	0x0f, 0x70, 0x9e, 0x86, 0x7d, 0xbf, 0x68, 0xfa, 0x50, 0x40, 0x2a, 0xb8, 0x97, 0x31, 0x2a, 0xa8,
	0xbd, 0x69, 0x70, 0x4f, 0xe3, 0x5e, 0xd1, 0xdc, 0xd9, 0xc4, 0x09, 0x49, 0xa9, 0xaf, 0xfe, 0xea,
	0xa8, 0x1d, 0x37, 0xa4, 0x3c, 0xa1, 0xdc, 0xef, 0x61, 0x0e, 0x7e, 0xd1, 0xec, 0x81, 0xc0, 0x4d,
	0x3f, 0xa4, 0x24, 0x35, 0xf8, 0xb6, 0xc6, 0xbb, 0xca, 0xf2, 0xb5, 0x61, 0xa0, 0xad, 0x98, 0xc6,
	0x54, 0xfb, 0xe5, 0x2f, 0xe3, 0xad, 0xc7, 0x94, 0xc6, 0x03, 0xf0, 0x95, 0xd5, 0xcb, 0x1f, 0xf8,
	0x82, 0x24, 0xc0, 0x05, 0x4e, 0x32, 0x13, 0x70, 0x7d, 0x92, 0x77, 0xd8, 0xc7, 0xc3, 0x84, 0x37,
	0x26, 0xe1, 0x18, 0x52, 0xe0, 0x84, 0x77, 0x71, 0x18, 0xd2, 0x3c, 0x15, 0x26, 0xf0, 0xf3, 0xe9,
	0x81, 0x05, 0x1e, 0x90, 0x08, 0x0b, 0xca, 0x4a, 0x4e, 0x93, 0xa1, 0x0c, 0x1e, 0xe5, 0xc0, 0xc5,
	0xf4, 0xa4, 0x05, 0x70, 0x41, 0xd2, 0x78, 0x3c, 0x69, 0xe3, 0x99, 0x85, 0x36, 0xef, 0xc8, 0x2a,
	0x1f, 0x48, 0xca, 0x07, 0x0c, 0xb0, 0x80, 0xc8, 0xfe, 0x04, 0xad, 0xea, 0x85, 0x5d, 0x12, 0x39,
	0xd6, 0xae, 0xb5, 0x57, 0x0d, 0x6a, 0xda, 0x71, 0x18, 0xd9, 0x87, 0xe8, 0x6a, 0x48, 0x29, 0x8b,
	0x48, 0x2a, 0x19, 0x75, 0x71, 0x14, 0x31, 0xe0, 0xdc, 0x59, 0xdc, 0xb5, 0xf6, 0x56, 0xdb, 0xce,
	0x6f, 0xbf, 0xde, 0xda, 0x32, 0x55, 0xdd, 0xd7, 0xc8, 0x3d, 0xc1, 0x48, 0x1a, 0x07, 0xf6, 0xc8,
	0x22, 0x83, 0xd8, 0x9f, 0xa1, 0x8d, 0xd1, 0x4f, 0x91, 0xc8, 0xa9, 0xa8, 0x64, 0x1f, 0x8c, 0x78,
	0x0f, 0xa3, 0xc6, 0x8f, 0x16, 0xba, 0xaa, 0x48, 0x06, 0x7a, 0x93, 0x25, 0xcd, 0x16, 0x5a, 0x09,
	0xe5, 0x4f, 0xca, 0x14, 0xc9, 0xf3, 0xb2, 0x97, 0x81, 0xf6, 0x6d, 0xb4, 0x62, 0x4a, 0xa5, 0x18,
	0xaf, 0xb5, 0x76, 0xbc, 0x09, 0x5d, 0x79, 0x26, 0x4f, 0xbb, 0xfa, 0xf2, 0x75, 0x7d, 0x21, 0x28,
	0x17, 0x34, 0x92, 0x71, 0x1a, 0xf7, 0x40, 0x88, 0xc1, 0xac, 0x6a, 0x5d, 0x47, 0xc8, 0x2c, 0x97,
	0xe8, 0xa2, 0x42, 0x57, 0x8d, 0xe7, 0x30, 0xb2, 0x77, 0x50, 0x0d, 0x67, 0x19, 0xa3, 0x05, 0xe8,
	0xbd, 0xd7, 0x82, 0xa1, 0xdd, 0xf8, 0x63, 0x11, 0x39, 0x2a, 0xdf, 0x57, 0x5a, 0x06, 0xfb, 0xba,
	0x73, 0xfb, 0x51, 0x34, 0x2b, 0x69, 0x0b, 0xad, 0xcc, 0xdb, 0x96, 0x32, 0xd0, 0x7e, 0x66, 0xa1,
	0x25, 0x39, 0x27, 0xdc, 0xa9, 0xec, 0x56, 0xf6, 0xd6, 0x5a, 0xdb, 0x9e, 0x89, 0x97, 0x93, 0xe4,
	0x99, 0x49, 0xf2, 0x0e, 0x28, 0x49, 0xdb, 0x8f, 0x64, 0x59, 0xfe, 0x7e, 0x5d, 0xbf, 0x11, 0x13,
	0xd1, 0xcf, 0x7b, 0x5e, 0x48, 0x13, 0x33, 0x49, 0xe6, 0xdf, 0x2d, 0x1e, 0x3d, 0xf4, 0xc5, 0x71,
	0x06, 0x5c, 0x2d, 0x78, 0x7e, 0x52, 0xdf, 0x9b, 0x33, 0x94, 0xff, 0xf4, 0xe6, 0xc5, 0xcd, 0xf5,
	0x01, 0xc4, 0x38, 0x3c, 0xee, 0x2a, 0x3a, 0x3f, 0xbf, 0x79, 0x71, 0xd3, 0x0a, 0x34, 0xb5, 0x69,
	0xda, 0xab, 0xfe, 0x7f, 0xed, 0x35, 0x9e, 0x94, 0xd5, 0xbd, 0xaf, 0x07, 0xe3, 0x72, 0xab, 0xdb,
	0x41, 0x57, 0xca, 0x01, 0xa4, 0x99, 0x20, 0x54, 0x95, 0x59, 0xca, 0xef, 0xd3, 0x77, 0xc8, 0xcf,
	0x30, 0xba, 0xab, 0x03, 0x8d, 0x0a, 0x37, 0x8a, 0x31, 0xef, 0xfb, 0x2c, 0xc5, 0x5f, 0x15, 0x23,
	0xec, 0xfb, 0xe5, 0x39, 0x73, 0x49, 0x55, 0xd8, 0x42, 0x4b, 0x31, 0xa4, 0x47, 0x8f, 0xd5, 0xde,
	0xd7, 0x03, 0x6d, 0xd8, 0x2e, 0x42, 0x21, 0x4d, 0x79, 0x27, 0xef, 0x7d, 0x0d, 0xc7, 0x6a, 0x03,
	0xeb, 0xc1, 0x88, 0xc7, 0x7e, 0x62, 0xa1, 0x0d, 0x0e, 0x83, 0x07, 0x5f, 0x82, 0xd4, 0x85, 0xdc,
	0xbd, 0xb3, 0xa4, 0x6a, 0x77, 0x8e, 0x44, 0xef, 0xc8, 0x9a, 0x3d, 0x3f, 0x99, 0x5b, 0xa2, 0x53,
	0x64, 0xf7, 0x56, 0x5e, 0xbb, 0x89, 0xaa, 0x19, 0x00, 0x73, 0x96, 0x55, 0xfe, 0x6b, 0xef, 0xe8,
	0x5d, 0x07, 0x80, 0x99, 0x8e, 0xa9, 0x50, 0xbb, 0x8e, 0xd6, 0xfa, 0x58, 0xdd, 0x37, 0xdf, 0x41,
	0x28, 0x9c, 0x15, 0x35, 0xe4, 0xa8, 0x8f, 0x79, 0x47, 0x7b, 0xe4, 0x09, 0x61, 0x40, 0x59, 0xe6,
	0x9a, 0x3e, 0x21, 0x8c, 0x67, 0xfa, 0x71, 0xbb, 0x7a, 0x81, 0x3e, 0xff, 0x52, 0x9e, 0xa3, 0x46,
	0xeb, 0x01, 0x24, 0xf2, 0xa0, 0x19, 0x6d, 0xa5, 0x35, 0x6f, 0x2b, 0xc7, 0xb4, 0xb1, 0x38, 0xdf,
	0x15, 0x51, 0xb9, 0x00, 0xe7, 0x7f, 0x2c, 0xf4, 0xd1, 0xb8, 0x36, 0x4b, 0xd6, 0xb7, 0xd1, 0xf6,
	0xc4, 0xfd, 0x58, 0xde, 0x6e, 0x7a, 0x1f, 0xc1, 0x35, 0x13, 0xf0, 0x9f, 0xae, 0x35, 0x7c, 0x3e,
	0xfb, 0xb7, 0x3a, 0x56, 0x99, 0xd1, 0xb1, 0xea, 0x9c, 0x1d, 0x5b, 0xba, 0xc0, 0xee, 0x85, 0xb9,
	0x9d, 0x3b, 0x98, 0xe1, 0xe4, 0xa0, 0x8f, 0xd3, 0x78, 0xd6, 0x58, 0x7e, 0x8c, 0x96, 0x13, 0x1a,
	0xe5, 0x03, 0xd0, 0x53, 0x19, 0x18, 0x4b, 0x8e, 0x5e, 0x26, 0x3f, 0xa2, 0x9b, 0x10, 0x68, 0x43,
	0x7a, 0x0b, 0x3c, 0xc8, 0xc1, 0x4c, 0x9d, 0x36, 0x1a, 0x3f, 0x58, 0x68, 0x4b, 0xa5, 0xfd, 0x46,
	0x7d, 0xf5, 0x88, 0x91, 0x38, 0x06, 0x36, 0x2b, 0xf3, 0x5d, 0xf4, 0xa1, 0x01, 0x87, 0x2f, 0xa4,
	0xe1, 0x15, 0xab, 0xdf, 0x50, 0x5e, 0xf9, 0x86, 0xf2, 0x8e, 0xca, 0x88, 0x76, 0x4d, 0x8e, 0xca,
	0xd3, 0x93, 0xba, 0x15, 0x5c, 0xd1, 0xab, 0x87, 0x50, 0xa3, 0x65, 0xd4, 0xaa, 0x59, 0x04, 0x50,
	0x00, 0x9b, 0xf5, 0x38, 0x69, 0xb7, 0x5f, 0x9e, 0xba, 0xd6, 0xab, 0x53, 0xd7, 0xfa, 0xf3, 0xd4,
	0xb5, 0x9e, 0x9e, 0xb9, 0x0b, 0xaf, 0xce, 0xdc, 0x85, 0xdf, 0xcf, 0xdc, 0x85, 0x6f, 0x47, 0x6f,
	0x20, 0x12, 0xa7, 0x44, 0x80, 0x5f, 0x3e, 0x92, 0x1e, 0x97, 0xcf, 0x24, 0x75, 0x1e, 0xf4, 0x96,
	0x15, 0xcd, 0x2f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xe4, 0xcc, 0x51, 0x91, 0x0a, 0x00,
	0x00,
}

func (m *EventChainCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoordinatorId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoordinatorId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRequestSettled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRequestSettled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRequestSettled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventGenesisAccountAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGenesisAccountAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGenesisAccountAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventVestingAccountAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventVestingAccountAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventVestingAccountAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.VestingOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValidatorAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValidatorAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValidatorAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ProjectId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x40
	}
	if m.HasProject {
		i--
		if m.HasProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.SelfDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ConsPubKey) > 0 {
		i -= len(m.ConsPubKey)
		copy(dAtA[i:], m.ConsPubKey)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConsPubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GenTx) > 0 {
		i -= len(m.GenTx)
		copy(dAtA[i:], m.GenTx)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GenTx)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAccountRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAccountRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAccountRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventValidatorRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValidatorRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValidatorRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorAddress) > 0 {
		i -= len(m.CoordinatorAddress)
		copy(dAtA[i:], m.CoordinatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CoordinatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProjectId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x20
	}
	if m.HasProject {
		i--
		if m.HasProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GenesisValidatorAccount) > 0 {
		i -= len(m.GenesisValidatorAccount)
		copy(dAtA[i:], m.GenesisValidatorAccount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GenesisValidatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventParamChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventParamChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventParamChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventLaunchTriggered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLaunchTriggered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLaunchTriggered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LaunchTimestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LaunchTimestamp):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintEvents(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventLaunchReverted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLaunchReverted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLaunchReverted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LaunchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventChainCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CoordinatorId != 0 {
		n += 1 + sovEvents(uint64(m.CoordinatorId))
	}
	return n
}

func (m *EventRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Request.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventRequestSettled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	if m.RequestId != 0 {
		n += 1 + sovEvents(uint64(m.RequestId))
	}
	if m.Approved {
		n += 2
	}
	return n
}

func (m *EventGenesisAccountAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventVestingAccountAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.VestingOptions.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValidatorAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.GenTx)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConsPubKey)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.SelfDelegation.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Peer.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.HasProject {
		n += 2
	}
	if m.ProjectId != 0 {
		n += 1 + sovEvents(uint64(m.ProjectId))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAccountRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValidatorRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenesisValidatorAccount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	if m.HasProject {
		n += 2
	}
	if m.ProjectId != 0 {
		n += 1 + sovEvents(uint64(m.ProjectId))
	}
	l = len(m.CoordinatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventParamChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventLaunchTriggered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LaunchTimestamp)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventLaunchReverted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchId != 0 {
		n += 1 + sovEvents(uint64(m.LaunchId))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventChainCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorId", wireType)
			}
			m.CoordinatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoordinatorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRequestSettled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRequestSettled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRequestSettled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGenesisAccountAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGenesisAccountAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGenesisAccountAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventVestingAccountAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventVestingAccountAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventVestingAccountAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValidatorAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValidatorAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValidatorAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenTx = append(m.GenTx[:0], dAtA[iNdEx:postIndex]...)
			if m.GenTx == nil {
				m.GenTx = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsPubKey = append(m.ConsPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsPubKey == nil {
				m.ConsPubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasProject = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAccountRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAccountRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAccountRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValidatorRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValidatorRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValidatorRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasProject = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventParamChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventParamChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventParamChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLaunchTriggered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLaunchTriggered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLaunchTriggered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LaunchTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLaunchReverted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLaunchReverted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLaunchReverted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchId", wireType)
			}
			m.LaunchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
