// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/monitoringc/v1/monitoring_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonitoringHistory struct {
	LaunchID               uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	LatestMonitoringPacket string `protobuf:"bytes,2,opt,name=latestMonitoringPacket,proto3" json:"latestMonitoringPacket,omitempty"`
}

func (m *MonitoringHistory) Reset()         { *m = MonitoringHistory{} }
func (m *MonitoringHistory) String() string { return proto.CompactTextString(m) }
func (*MonitoringHistory) ProtoMessage()    {}
func (*MonitoringHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_62b7e761a38ba1f8, []int{0}
}
func (m *MonitoringHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonitoringHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonitoringHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonitoringHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitoringHistory.Merge(m, src)
}
func (m *MonitoringHistory) XXX_Size() int {
	return m.Size()
}
func (m *MonitoringHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitoringHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MonitoringHistory proto.InternalMessageInfo

func (m *MonitoringHistory) GetLaunchID() uint64 {
	if m != nil {
		return m.LaunchID
	}
	return 0
}

func (m *MonitoringHistory) GetLatestMonitoringPacket() string {
	if m != nil {
		return m.LatestMonitoringPacket
	}
	return ""
}

func init() {
	proto.RegisterType((*MonitoringHistory)(nil), "network.monitoringc.v1.MonitoringHistory")
}

func init() {
	proto.RegisterFile("network/monitoringc/v1/monitoring_history.proto", fileDescriptor_62b7e761a38ba1f8)
}

var fileDescriptor_62b7e761a38ba1f8 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcf, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0xd6, 0xcf, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0xca, 0xcc, 0x4b, 0x4f, 0xd6,
	0x2f, 0x33, 0x44, 0xe2, 0xc6, 0x67, 0x64, 0x16, 0x97, 0xe4, 0x17, 0x55, 0xea, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0x89, 0x41, 0x35, 0xe8, 0x21, 0x69, 0xd0, 0x2b, 0x33, 0x54, 0x4a, 0xe7, 0x12,
	0xf4, 0x85, 0x8b, 0x78, 0x40, 0xb4, 0x08, 0x49, 0x71, 0x71, 0xe4, 0x24, 0x96, 0xe6, 0x25, 0x67,
	0x78, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0xc1, 0xf9, 0x42, 0x66, 0x5c, 0x62, 0x39,
	0x89, 0x25, 0xa9, 0xc5, 0x25, 0x08, 0x6d, 0x01, 0x89, 0xc9, 0xd9, 0xa9, 0x25, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x38, 0x64, 0x9d, 0xdc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x21, 0x4a, 0x37, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x33,
	0x3d, 0x2f, 0xb3, 0x24, 0x15, 0xee, 0xbb, 0x0a, 0x14, 0xff, 0x95, 0x54, 0x16, 0xa4, 0x16, 0x27,
	0xb1, 0x81, 0x3d, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x71, 0x71, 0x53, 0xd6, 0x03, 0x01,
	0x00, 0x00,
}

func (m *MonitoringHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonitoringHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestMonitoringPacket) > 0 {
		i -= len(m.LatestMonitoringPacket)
		copy(dAtA[i:], m.LatestMonitoringPacket)
		i = encodeVarintMonitoringHistory(dAtA, i, uint64(len(m.LatestMonitoringPacket)))
		i--
		dAtA[i] = 0x12
	}
	if m.LaunchID != 0 {
		i = encodeVarintMonitoringHistory(dAtA, i, uint64(m.LaunchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonitoringHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonitoringHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonitoringHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LaunchID != 0 {
		n += 1 + sovMonitoringHistory(uint64(m.LaunchID))
	}
	l = len(m.LatestMonitoringPacket)
	if l > 0 {
		n += 1 + l + sovMonitoringHistory(uint64(l))
	}
	return n
}

func sovMonitoringHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonitoringHistory(x uint64) (n int) {
	return sovMonitoringHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonitoringHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonitoringHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchID", wireType)
			}
			m.LaunchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoringHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestMonitoringPacket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonitoringHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonitoringHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonitoringHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestMonitoringPacket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonitoringHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonitoringHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonitoringHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonitoringHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitoringHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonitoringHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonitoringHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonitoringHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonitoringHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonitoringHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonitoringHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonitoringHistory = fmt.Errorf("proto: unexpected end of group")
)
