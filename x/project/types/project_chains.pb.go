// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/project/v1/project_chains.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProjectChains struct {
	ProjectId uint64   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Chains    []uint64 `protobuf:"varint,2,rep,packed,name=chains,proto3" json:"chains,omitempty"`
}

func (m *ProjectChains) Reset()         { *m = ProjectChains{} }
func (m *ProjectChains) String() string { return proto.CompactTextString(m) }
func (*ProjectChains) ProtoMessage()    {}
func (*ProjectChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c4127f02f140670, []int{0}
}
func (m *ProjectChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectChains.Merge(m, src)
}
func (m *ProjectChains) XXX_Size() int {
	return m.Size()
}
func (m *ProjectChains) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectChains.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectChains proto.InternalMessageInfo

func (m *ProjectChains) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *ProjectChains) GetChains() []uint64 {
	if m != nil {
		return m.Chains
	}
	return nil
}

func init() {
	proto.RegisterType((*ProjectChains)(nil), "network.project.v1.ProjectChains")
}

func init() {
	proto.RegisterFile("network/project/v1/project_chains.proto", fileDescriptor_8c4127f02f140670)
}

var fileDescriptor_8c4127f02f140670 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x28, 0xca, 0xcf, 0x4a, 0x4d, 0x2e, 0xd1, 0x2f, 0x33, 0x84, 0x31,
	0xe3, 0x93, 0x33, 0x12, 0x33, 0xf3, 0x8a, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xa0,
	0x0a, 0xf5, 0xa0, 0xb2, 0x7a, 0x65, 0x86, 0x4a, 0x6e, 0x5c, 0xbc, 0x01, 0x10, 0x9e, 0x33, 0x58,
	0xa9, 0x90, 0x2c, 0x17, 0x17, 0x4c, 0x73, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10,
	0x27, 0x54, 0xc4, 0x33, 0x45, 0x48, 0x8c, 0x8b, 0x0d, 0x62, 0xa6, 0x04, 0x93, 0x02, 0xb3, 0x06,
	0x4b, 0x10, 0x94, 0xe7, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x99, 0xe9, 0x79, 0x99,
	0x25, 0xa9, 0xfa, 0x30, 0x07, 0x57, 0xc0, 0x9d, 0x5c, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06,
	0x76, 0xa7, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x53, 0x1c, 0x74, 0x7f, 0xd2, 0x00, 0x00, 0x00,
}

func (m *ProjectChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		dAtA2 := make([]byte, len(m.Chains)*10)
		var j1 int
		for _, num := range m.Chains {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProjectChains(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectId != 0 {
		i = encodeVarintProjectChains(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProjectChains(dAtA []byte, offset int, v uint64) int {
	offset -= sovProjectChains(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProjectChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovProjectChains(uint64(m.ProjectId))
	}
	if len(m.Chains) > 0 {
		l = 0
		for _, e := range m.Chains {
			l += sovProjectChains(uint64(e))
		}
		n += 1 + sovProjectChains(uint64(l)) + l
	}
	return n
}

func sovProjectChains(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProjectChains(x uint64) (n int) {
	return sovProjectChains(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProjectChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectChains
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectChains
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectChains
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Chains = append(m.Chains, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectChains
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProjectChains
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProjectChains
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Chains) == 0 {
					m.Chains = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProjectChains
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Chains = append(m.Chains, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProjectChains(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProjectChains
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProjectChains(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProjectChains
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectChains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectChains
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProjectChains
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProjectChains
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProjectChains
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProjectChains        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProjectChains          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProjectChains = fmt.Errorf("proto: unexpected end of group")
)
