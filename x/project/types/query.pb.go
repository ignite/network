// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/project/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMainnetAccountRequest struct {
	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetMainnetAccountRequest) Reset()         { *m = QueryGetMainnetAccountRequest{} }
func (m *QueryGetMainnetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMainnetAccountRequest) ProtoMessage()    {}
func (*QueryGetMainnetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{2}
}
func (m *QueryGetMainnetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMainnetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMainnetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMainnetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMainnetAccountRequest.Merge(m, src)
}
func (m *QueryGetMainnetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMainnetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMainnetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMainnetAccountRequest proto.InternalMessageInfo

func (m *QueryGetMainnetAccountRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryGetMainnetAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetMainnetAccountResponse struct {
	MainnetAccount MainnetAccount `protobuf:"bytes,1,opt,name=mainnetAccount,proto3" json:"mainnetAccount"`
}

func (m *QueryGetMainnetAccountResponse) Reset()         { *m = QueryGetMainnetAccountResponse{} }
func (m *QueryGetMainnetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMainnetAccountResponse) ProtoMessage()    {}
func (*QueryGetMainnetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{3}
}
func (m *QueryGetMainnetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMainnetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMainnetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMainnetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMainnetAccountResponse.Merge(m, src)
}
func (m *QueryGetMainnetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMainnetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMainnetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMainnetAccountResponse proto.InternalMessageInfo

func (m *QueryGetMainnetAccountResponse) GetMainnetAccount() MainnetAccount {
	if m != nil {
		return m.MainnetAccount
	}
	return MainnetAccount{}
}

type QueryAllMainnetAccountRequest struct {
	ProjectID  uint64             `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMainnetAccountRequest) Reset()         { *m = QueryAllMainnetAccountRequest{} }
func (m *QueryAllMainnetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMainnetAccountRequest) ProtoMessage()    {}
func (*QueryAllMainnetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{4}
}
func (m *QueryAllMainnetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMainnetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMainnetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMainnetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMainnetAccountRequest.Merge(m, src)
}
func (m *QueryAllMainnetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMainnetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMainnetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMainnetAccountRequest proto.InternalMessageInfo

func (m *QueryAllMainnetAccountRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryAllMainnetAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMainnetAccountResponse struct {
	MainnetAccount []MainnetAccount    `protobuf:"bytes,1,rep,name=mainnetAccount,proto3" json:"mainnetAccount"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMainnetAccountResponse) Reset()         { *m = QueryAllMainnetAccountResponse{} }
func (m *QueryAllMainnetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMainnetAccountResponse) ProtoMessage()    {}
func (*QueryAllMainnetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{5}
}
func (m *QueryAllMainnetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMainnetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMainnetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMainnetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMainnetAccountResponse.Merge(m, src)
}
func (m *QueryAllMainnetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMainnetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMainnetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMainnetAccountResponse proto.InternalMessageInfo

func (m *QueryAllMainnetAccountResponse) GetMainnetAccount() []MainnetAccount {
	if m != nil {
		return m.MainnetAccount
	}
	return nil
}

func (m *QueryAllMainnetAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProjectRequest struct {
	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (m *QueryGetProjectRequest) Reset()         { *m = QueryGetProjectRequest{} }
func (m *QueryGetProjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectRequest) ProtoMessage()    {}
func (*QueryGetProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{6}
}
func (m *QueryGetProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectRequest.Merge(m, src)
}
func (m *QueryGetProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectRequest proto.InternalMessageInfo

func (m *QueryGetProjectRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type QueryGetProjectResponse struct {
	Project Project `protobuf:"bytes,1,opt,name=Project,proto3" json:"Project"`
}

func (m *QueryGetProjectResponse) Reset()         { *m = QueryGetProjectResponse{} }
func (m *QueryGetProjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectResponse) ProtoMessage()    {}
func (*QueryGetProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{7}
}
func (m *QueryGetProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectResponse.Merge(m, src)
}
func (m *QueryGetProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectResponse proto.InternalMessageInfo

func (m *QueryGetProjectResponse) GetProject() Project {
	if m != nil {
		return m.Project
	}
	return Project{}
}

type QueryAllProjectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProjectRequest) Reset()         { *m = QueryAllProjectRequest{} }
func (m *QueryAllProjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProjectRequest) ProtoMessage()    {}
func (*QueryAllProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{8}
}
func (m *QueryAllProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProjectRequest.Merge(m, src)
}
func (m *QueryAllProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProjectRequest proto.InternalMessageInfo

func (m *QueryAllProjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProjectResponse struct {
	Project    []Project           `protobuf:"bytes,1,rep,name=Project,proto3" json:"Project"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProjectResponse) Reset()         { *m = QueryAllProjectResponse{} }
func (m *QueryAllProjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProjectResponse) ProtoMessage()    {}
func (*QueryAllProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{9}
}
func (m *QueryAllProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProjectResponse.Merge(m, src)
}
func (m *QueryAllProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProjectResponse proto.InternalMessageInfo

func (m *QueryAllProjectResponse) GetProject() []Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *QueryAllProjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProjectChainsRequest struct {
	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (m *QueryGetProjectChainsRequest) Reset()         { *m = QueryGetProjectChainsRequest{} }
func (m *QueryGetProjectChainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectChainsRequest) ProtoMessage()    {}
func (*QueryGetProjectChainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{10}
}
func (m *QueryGetProjectChainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectChainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectChainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectChainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectChainsRequest.Merge(m, src)
}
func (m *QueryGetProjectChainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectChainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectChainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectChainsRequest proto.InternalMessageInfo

func (m *QueryGetProjectChainsRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type QueryGetProjectChainsResponse struct {
	ProjectChains ProjectChains `protobuf:"bytes,1,opt,name=projectChains,proto3" json:"projectChains"`
}

func (m *QueryGetProjectChainsResponse) Reset()         { *m = QueryGetProjectChainsResponse{} }
func (m *QueryGetProjectChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectChainsResponse) ProtoMessage()    {}
func (*QueryGetProjectChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{11}
}
func (m *QueryGetProjectChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectChainsResponse.Merge(m, src)
}
func (m *QueryGetProjectChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectChainsResponse proto.InternalMessageInfo

func (m *QueryGetProjectChainsResponse) GetProjectChains() ProjectChains {
	if m != nil {
		return m.ProjectChains
	}
	return ProjectChains{}
}

type QuerySpecialAllocationsBalanceRequest struct {
	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
}

func (m *QuerySpecialAllocationsBalanceRequest) Reset()         { *m = QuerySpecialAllocationsBalanceRequest{} }
func (m *QuerySpecialAllocationsBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpecialAllocationsBalanceRequest) ProtoMessage()    {}
func (*QuerySpecialAllocationsBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{12}
}
func (m *QuerySpecialAllocationsBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecialAllocationsBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecialAllocationsBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecialAllocationsBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecialAllocationsBalanceRequest.Merge(m, src)
}
func (m *QuerySpecialAllocationsBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecialAllocationsBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecialAllocationsBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecialAllocationsBalanceRequest proto.InternalMessageInfo

func (m *QuerySpecialAllocationsBalanceRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

type QuerySpecialAllocationsBalanceResponse struct {
	GenesisDistribution github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=genesisDistribution,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"genesisDistribution"`
	ClaimableAirdrop    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=claimableAirdrop,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"claimableAirdrop"`
}

func (m *QuerySpecialAllocationsBalanceResponse) Reset() {
	*m = QuerySpecialAllocationsBalanceResponse{}
}
func (m *QuerySpecialAllocationsBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpecialAllocationsBalanceResponse) ProtoMessage()    {}
func (*QuerySpecialAllocationsBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{13}
}
func (m *QuerySpecialAllocationsBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecialAllocationsBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecialAllocationsBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecialAllocationsBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecialAllocationsBalanceResponse.Merge(m, src)
}
func (m *QuerySpecialAllocationsBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecialAllocationsBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecialAllocationsBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecialAllocationsBalanceResponse proto.InternalMessageInfo

func (m *QuerySpecialAllocationsBalanceResponse) GetGenesisDistribution() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.GenesisDistribution
	}
	return nil
}

func (m *QuerySpecialAllocationsBalanceResponse) GetClaimableAirdrop() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ClaimableAirdrop
	}
	return nil
}

type QueryMainnetAccountBalanceRequest struct {
	ProjectID uint64 `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryMainnetAccountBalanceRequest) Reset()         { *m = QueryMainnetAccountBalanceRequest{} }
func (m *QueryMainnetAccountBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMainnetAccountBalanceRequest) ProtoMessage()    {}
func (*QueryMainnetAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{14}
}
func (m *QueryMainnetAccountBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMainnetAccountBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMainnetAccountBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMainnetAccountBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMainnetAccountBalanceRequest.Merge(m, src)
}
func (m *QueryMainnetAccountBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMainnetAccountBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMainnetAccountBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMainnetAccountBalanceRequest proto.InternalMessageInfo

func (m *QueryMainnetAccountBalanceRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryMainnetAccountBalanceRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryMainnetAccountBalanceResponse struct {
	MainnetAccountBalance MainnetAccountBalance `protobuf:"bytes,1,opt,name=mainnetAccountBalance,proto3" json:"mainnetAccountBalance"`
}

func (m *QueryMainnetAccountBalanceResponse) Reset()         { *m = QueryMainnetAccountBalanceResponse{} }
func (m *QueryMainnetAccountBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMainnetAccountBalanceResponse) ProtoMessage()    {}
func (*QueryMainnetAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{15}
}
func (m *QueryMainnetAccountBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMainnetAccountBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMainnetAccountBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMainnetAccountBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMainnetAccountBalanceResponse.Merge(m, src)
}
func (m *QueryMainnetAccountBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMainnetAccountBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMainnetAccountBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMainnetAccountBalanceResponse proto.InternalMessageInfo

func (m *QueryMainnetAccountBalanceResponse) GetMainnetAccountBalance() MainnetAccountBalance {
	if m != nil {
		return m.MainnetAccountBalance
	}
	return MainnetAccountBalance{}
}

type QueryListMainnetAccountBalanceRequest struct {
	ProjectID  uint64             `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListMainnetAccountBalanceRequest) Reset()         { *m = QueryListMainnetAccountBalanceRequest{} }
func (m *QueryListMainnetAccountBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListMainnetAccountBalanceRequest) ProtoMessage()    {}
func (*QueryListMainnetAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{16}
}
func (m *QueryListMainnetAccountBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListMainnetAccountBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListMainnetAccountBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListMainnetAccountBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListMainnetAccountBalanceRequest.Merge(m, src)
}
func (m *QueryListMainnetAccountBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListMainnetAccountBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListMainnetAccountBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListMainnetAccountBalanceRequest proto.InternalMessageInfo

func (m *QueryListMainnetAccountBalanceRequest) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *QueryListMainnetAccountBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListMainnetAccountBalanceResponse struct {
	MainnetAccountBalance []MainnetAccountBalance `protobuf:"bytes,1,rep,name=mainnetAccountBalance,proto3" json:"mainnetAccountBalance"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListMainnetAccountBalanceResponse) Reset() {
	*m = QueryListMainnetAccountBalanceResponse{}
}
func (m *QueryListMainnetAccountBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListMainnetAccountBalanceResponse) ProtoMessage()    {}
func (*QueryListMainnetAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{17}
}
func (m *QueryListMainnetAccountBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListMainnetAccountBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListMainnetAccountBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListMainnetAccountBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListMainnetAccountBalanceResponse.Merge(m, src)
}
func (m *QueryListMainnetAccountBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListMainnetAccountBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListMainnetAccountBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListMainnetAccountBalanceResponse proto.InternalMessageInfo

func (m *QueryListMainnetAccountBalanceResponse) GetMainnetAccountBalance() []MainnetAccountBalance {
	if m != nil {
		return m.MainnetAccountBalance
	}
	return nil
}

func (m *QueryListMainnetAccountBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTotalSharesRequest struct {
}

func (m *QueryTotalSharesRequest) Reset()         { *m = QueryTotalSharesRequest{} }
func (m *QueryTotalSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSharesRequest) ProtoMessage()    {}
func (*QueryTotalSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{18}
}
func (m *QueryTotalSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSharesRequest.Merge(m, src)
}
func (m *QueryTotalSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSharesRequest proto.InternalMessageInfo

type QueryTotalSharesResponse struct {
	TotalShares uint64 `protobuf:"varint,1,opt,name=totalShares,proto3" json:"totalShares,omitempty"`
}

func (m *QueryTotalSharesResponse) Reset()         { *m = QueryTotalSharesResponse{} }
func (m *QueryTotalSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSharesResponse) ProtoMessage()    {}
func (*QueryTotalSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d78f73b40e1ec8a7, []int{19}
}
func (m *QueryTotalSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSharesResponse.Merge(m, src)
}
func (m *QueryTotalSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSharesResponse proto.InternalMessageInfo

func (m *QueryTotalSharesResponse) GetTotalShares() uint64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "network.project.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "network.project.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetMainnetAccountRequest)(nil), "network.project.v1.QueryGetMainnetAccountRequest")
	proto.RegisterType((*QueryGetMainnetAccountResponse)(nil), "network.project.v1.QueryGetMainnetAccountResponse")
	proto.RegisterType((*QueryAllMainnetAccountRequest)(nil), "network.project.v1.QueryAllMainnetAccountRequest")
	proto.RegisterType((*QueryAllMainnetAccountResponse)(nil), "network.project.v1.QueryAllMainnetAccountResponse")
	proto.RegisterType((*QueryGetProjectRequest)(nil), "network.project.v1.QueryGetProjectRequest")
	proto.RegisterType((*QueryGetProjectResponse)(nil), "network.project.v1.QueryGetProjectResponse")
	proto.RegisterType((*QueryAllProjectRequest)(nil), "network.project.v1.QueryAllProjectRequest")
	proto.RegisterType((*QueryAllProjectResponse)(nil), "network.project.v1.QueryAllProjectResponse")
	proto.RegisterType((*QueryGetProjectChainsRequest)(nil), "network.project.v1.QueryGetProjectChainsRequest")
	proto.RegisterType((*QueryGetProjectChainsResponse)(nil), "network.project.v1.QueryGetProjectChainsResponse")
	proto.RegisterType((*QuerySpecialAllocationsBalanceRequest)(nil), "network.project.v1.QuerySpecialAllocationsBalanceRequest")
	proto.RegisterType((*QuerySpecialAllocationsBalanceResponse)(nil), "network.project.v1.QuerySpecialAllocationsBalanceResponse")
	proto.RegisterType((*QueryMainnetAccountBalanceRequest)(nil), "network.project.v1.QueryMainnetAccountBalanceRequest")
	proto.RegisterType((*QueryMainnetAccountBalanceResponse)(nil), "network.project.v1.QueryMainnetAccountBalanceResponse")
	proto.RegisterType((*QueryListMainnetAccountBalanceRequest)(nil), "network.project.v1.QueryListMainnetAccountBalanceRequest")
	proto.RegisterType((*QueryListMainnetAccountBalanceResponse)(nil), "network.project.v1.QueryListMainnetAccountBalanceResponse")
	proto.RegisterType((*QueryTotalSharesRequest)(nil), "network.project.v1.QueryTotalSharesRequest")
	proto.RegisterType((*QueryTotalSharesResponse)(nil), "network.project.v1.QueryTotalSharesResponse")
}

func init() { proto.RegisterFile("network/project/v1/query.proto", fileDescriptor_d78f73b40e1ec8a7) }

var fileDescriptor_d78f73b40e1ec8a7 = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x24, 0x25, 0x55, 0x26, 0x50, 0xb5, 0xd3, 0x14, 0x12, 0x13, 0x9c, 0x64, 0x81, 0x7c,
	0xb5, 0xf1, 0x62, 0x87, 0x56, 0xa2, 0x1f, 0x2a, 0x76, 0x1a, 0x02, 0x12, 0x91, 0x82, 0x53, 0x71,
	0xe0, 0x62, 0xc6, 0x9b, 0xd1, 0x66, 0xe8, 0x7a, 0xc7, 0xd9, 0x5d, 0x07, 0xa2, 0xaa, 0x17, 0x04,
	0x27, 0x84, 0x40, 0x42, 0xe2, 0xd0, 0x0b, 0x1c, 0x38, 0x20, 0x4e, 0x95, 0xe0, 0x80, 0x84, 0x84,
	0xc4, 0xad, 0xc7, 0x0a, 0x84, 0x54, 0x09, 0x54, 0x50, 0x82, 0xd4, 0xff, 0x81, 0x13, 0xf2, 0xcc,
	0xdb, 0xda, 0xeb, 0xfd, 0x8c, 0x9b, 0x03, 0x97, 0xda, 0x9e, 0xf7, 0x31, 0xbf, 0xdf, 0x7b, 0x6f,
	0xde, 0x7b, 0x0d, 0xce, 0xdb, 0xcc, 0x7b, 0x5f, 0x38, 0x37, 0xf4, 0xa6, 0x23, 0xde, 0x63, 0x86,
	0xa7, 0xef, 0x16, 0xf5, 0x9d, 0x16, 0x73, 0xf6, 0x0a, 0x4d, 0x47, 0x78, 0x82, 0x10, 0x90, 0x17,
	0x40, 0x5e, 0xd8, 0x2d, 0xe6, 0x4e, 0xd1, 0x06, 0xb7, 0x85, 0x2e, 0xff, 0x55, 0x6a, 0xb9, 0x45,
	0x43, 0xb8, 0x0d, 0xe1, 0xea, 0x75, 0xea, 0x32, 0x65, 0xaf, 0xef, 0x16, 0xeb, 0xcc, 0xa3, 0x45,
	0xbd, 0x49, 0x4d, 0x6e, 0x53, 0x8f, 0x0b, 0x1b, 0x74, 0xf3, 0xdd, 0xba, 0xbe, 0x96, 0x21, 0xb8,
	0x2f, 0x9f, 0x50, 0xf2, 0x9a, 0xfc, 0xa5, 0xab, 0x1f, 0x20, 0x1a, 0x33, 0x85, 0x29, 0xd4, 0x79,
	0xfb, 0x1b, 0x9c, 0x4e, 0x9a, 0x42, 0x98, 0x16, 0xd3, 0x69, 0x93, 0xeb, 0xd4, 0xb6, 0x85, 0x27,
	0x6f, 0xf3, 0x6d, 0xe6, 0x23, 0x18, 0x36, 0x28, 0xb7, 0x6d, 0xe6, 0xd5, 0xa8, 0x61, 0x88, 0x96,
	0xed, 0x81, 0xe6, 0x54, 0x84, 0x66, 0x93, 0x3a, 0xb4, 0xe1, 0xbb, 0x9a, 0x8e, 0x52, 0x80, 0xb8,
	0x28, 0x8d, 0xb9, 0x78, 0x8d, 0x9a, 0xb1, 0x4d, 0xb9, 0x8f, 0x4a, 0x1b, 0xc3, 0xe4, 0xad, 0x76,
	0x98, 0x36, 0xa4, 0xff, 0x2a, 0xdb, 0x69, 0x31, 0xd7, 0xd3, 0xae, 0xe3, 0xd3, 0x81, 0x53, 0xb7,
	0x29, 0x6c, 0x97, 0x91, 0x2b, 0x78, 0x58, 0xe1, 0x18, 0x47, 0xd3, 0x68, 0x7e, 0xb4, 0x94, 0x2b,
	0x84, 0xb3, 0x52, 0x50, 0x36, 0x95, 0x91, 0xbb, 0x0f, 0xa6, 0x06, 0xbe, 0x7d, 0x78, 0x67, 0x11,
	0x55, 0xc1, 0x48, 0xdb, 0xc1, 0xcf, 0x49, 0xaf, 0x6b, 0xcc, 0x5b, 0x57, 0xc4, 0xcb, 0x8a, 0x37,
	0x5c, 0x4b, 0x26, 0xf1, 0x08, 0x38, 0x7a, 0xe3, 0x9a, 0xbc, 0xe2, 0x58, 0xb5, 0x73, 0x40, 0x4a,
	0xf8, 0x38, 0xdd, 0xda, 0x72, 0x98, 0xeb, 0x8e, 0x0f, 0x4e, 0xa3, 0xf9, 0x91, 0xca, 0xf8, 0xaf,
	0x3f, 0x2c, 0x8d, 0x41, 0x5e, 0xca, 0x4a, 0xb2, 0xe9, 0x39, 0xdc, 0x36, 0xab, 0xbe, 0xa2, 0xe6,
	0xe0, 0x7c, 0xdc, 0x95, 0xc0, 0x69, 0x03, 0x9f, 0x68, 0x04, 0x24, 0xc0, 0x4d, 0x8b, 0xe2, 0x16,
	0xf4, 0x51, 0x39, 0xd6, 0xe6, 0x58, 0xed, 0xb1, 0xd7, 0x3e, 0x46, 0xc0, 0xb3, 0x6c, 0x59, 0xfd,
	0xf0, 0x7c, 0x0d, 0xe3, 0x4e, 0xad, 0x4a, 0xaa, 0xa3, 0xa5, 0xd9, 0x02, 0xf0, 0x6c, 0x17, 0x6b,
	0x41, 0x3d, 0x0c, 0x28, 0xd9, 0xc2, 0x06, 0x35, 0x19, 0x78, 0xae, 0x76, 0x59, 0x6a, 0x3f, 0x21,
	0x20, 0x1f, 0x81, 0x23, 0x81, 0xfc, 0xd0, 0xe3, 0x90, 0x27, 0x6b, 0x11, 0xe0, 0xe7, 0x52, 0xc1,
	0x2b, 0x38, 0x01, 0xf4, 0x17, 0xf0, 0xd3, 0x7e, 0xe6, 0x36, 0x14, 0x86, 0x4c, 0xd1, 0xd3, 0xde,
	0xc6, 0xcf, 0x84, 0xec, 0x80, 0xed, 0x25, 0x7c, 0x1c, 0x8e, 0x20, 0xc7, 0xcf, 0x46, 0xd6, 0xaf,
	0xfa, 0x0a, 0xfc, 0x7c, 0x0b, 0xed, 0x5d, 0xc0, 0x53, 0xb6, 0xac, 0x1e, 0x3c, 0xc1, 0x7c, 0xa1,
	0xbe, 0xf3, 0xf5, 0x15, 0x02, 0xe8, 0xdd, 0x57, 0x44, 0x41, 0x1f, 0x3a, 0x1c, 0xf4, 0xa3, 0xcb,
	0xc9, 0x65, 0x3c, 0xd9, 0x13, 0xdb, 0x15, 0xd9, 0x4b, 0xb2, 0x65, 0xc6, 0xee, 0x3c, 0xff, 0x1e,
	0x6b, 0x20, 0xb9, 0x8e, 0x9f, 0x6a, 0x76, 0x0b, 0x20, 0x96, 0x33, 0x09, 0x54, 0x95, 0x22, 0x10,
	0x0e, 0x5a, 0x6b, 0xab, 0xf8, 0x45, 0x79, 0xdf, 0x66, 0x93, 0x19, 0x9c, 0x5a, 0x65, 0xcb, 0x12,
	0x86, 0xea, 0xc8, 0x15, 0x6a, 0x51, 0xdb, 0x60, 0xd9, 0x60, 0x7f, 0x33, 0x84, 0x67, 0xd3, 0xfc,
	0x00, 0x81, 0x9f, 0x11, 0x3e, 0x6d, 0x32, 0x9b, 0xb9, 0xdc, 0xbd, 0xc6, 0x5d, 0xcf, 0xe1, 0xf5,
	0x16, 0xd4, 0x44, 0x3b, 0x65, 0x13, 0x81, 0x90, 0xfb, 0xc1, 0x5e, 0x11, 0xdc, 0xae, 0xec, 0xb4,
	0xf1, 0xff, 0xfb, 0x60, 0x6a, 0xce, 0xe4, 0xde, 0x76, 0xab, 0x5e, 0x30, 0x44, 0x03, 0x06, 0x0e,
	0x7c, 0x2c, 0xb9, 0x5b, 0x37, 0x74, 0x6f, 0xaf, 0xc9, 0x5c, 0x69, 0xf0, 0xdd, 0x5f, 0x53, 0xf3,
	0x19, 0x55, 0xdd, 0xdb, 0x0f, 0xef, 0x2c, 0x3e, 0x69, 0x31, 0x93, 0x1a, 0x7b, 0xb5, 0xf6, 0x74,
	0x73, 0x55, 0x53, 0x8e, 0x02, 0x4a, 0x7e, 0x44, 0xf8, 0xa4, 0x61, 0x51, 0xde, 0xa0, 0x75, 0x8b,
	0x95, 0xb9, 0xb3, 0xe5, 0x88, 0xe6, 0xf8, 0xe0, 0xff, 0x10, 0x7d, 0x08, 0xa5, 0xd6, 0xc2, 0x33,
	0x32, 0x4b, 0x3d, 0x5d, 0xea, 0x10, 0x99, 0xee, 0x6b, 0xc0, 0x7c, 0x82, 0xb0, 0x96, 0x74, 0x2f,
	0x54, 0x06, 0xc3, 0x67, 0x1a, 0x51, 0x0a, 0x50, 0xe2, 0x0b, 0x19, 0xfa, 0xad, 0x32, 0x80, 0x52,
	0x8f, 0xf6, 0xa6, 0x7d, 0x8a, 0xa0, 0xe6, 0xdf, 0xe4, 0xae, 0xf7, 0x18, 0x91, 0x38, 0xaa, 0x11,
	0x74, 0x1f, 0xc1, 0xdb, 0x49, 0xc0, 0x93, 0x1e, 0xa1, 0xa1, 0xa3, 0x8b, 0xd0, 0xd1, 0xf5, 0xc2,
	0x09, 0x68, 0xd6, 0xd7, 0x85, 0x47, 0xad, 0xcd, 0x6d, 0xea, 0xb0, 0x47, 0xdb, 0xd3, 0x65, 0x3c,
	0x1e, 0x16, 0x01, 0xcd, 0x69, 0x3c, 0xea, 0x75, 0x8e, 0x21, 0xf2, 0xdd, 0x47, 0xa5, 0xaf, 0x4f,
	0xe0, 0x27, 0xa4, 0x39, 0xf9, 0x08, 0xe1, 0x61, 0xb5, 0x4d, 0x91, 0xd9, 0x28, 0xfa, 0xe1, 0xc5,
	0x2d, 0x37, 0x97, 0xaa, 0xa7, 0x70, 0x68, 0x0b, 0x1f, 0xfe, 0xf6, 0xcf, 0x17, 0x83, 0xcf, 0x93,
	0x19, 0x9d, 0x9b, 0x36, 0xf7, 0x98, 0x1e, 0xbb, 0x73, 0x92, 0x5f, 0x10, 0x3e, 0x15, 0xda, 0x9f,
	0x48, 0x31, 0xf6, 0xa6, 0xb8, 0xf5, 0x2e, 0x57, 0x3a, 0x8c, 0x09, 0xe0, 0x5c, 0x95, 0x38, 0xaf,
	0x92, 0x2b, 0x71, 0x38, 0x7b, 0x56, 0x68, 0xfd, 0xe6, 0xa3, 0x2a, 0xbe, 0xa5, 0xdf, 0x84, 0x57,
	0x7a, 0xab, 0xdd, 0xd8, 0x48, 0xb8, 0x06, 0x13, 0x48, 0xc4, 0xed, 0x6e, 0x09, 0x24, 0x62, 0xd7,
	0x2c, 0xed, 0x92, 0x24, 0x71, 0x9e, 0x2c, 0xf7, 0x41, 0x82, 0xdc, 0x46, 0x18, 0x77, 0x46, 0x26,
	0x59, 0x4c, 0x0a, 0x62, 0x70, 0x33, 0xc9, 0x9d, 0xcd, 0xa4, 0x0b, 0x20, 0x97, 0x25, 0xc8, 0x25,
	0x72, 0x36, 0x0e, 0xa4, 0xff, 0xd9, 0x0d, 0xee, 0x33, 0x84, 0x47, 0xdb, 0x71, 0x4d, 0x47, 0x17,
	0xda, 0x9b, 0x12, 0xd0, 0x85, 0x17, 0x20, 0x6d, 0x4e, 0xa2, 0x9b, 0x21, 0x53, 0x29, 0xe8, 0xc8,
	0xf7, 0x08, 0x9f, 0xec, 0xdd, 0x30, 0xc8, 0x4b, 0x19, 0x02, 0x11, 0x58, 0x65, 0x72, 0xc5, 0x43,
	0x58, 0x00, 0xc4, 0x8b, 0x12, 0xe2, 0xcb, 0xa4, 0x94, 0x02, 0x11, 0xfe, 0x03, 0x16, 0x88, 0xe3,
	0x1f, 0x08, 0x4f, 0xc4, 0xee, 0x17, 0xe4, 0x95, 0x58, 0x30, 0x69, 0xbb, 0x4d, 0xee, 0x62, 0x3f,
	0xa6, 0x40, 0x68, 0x4d, 0x12, 0x2a, 0x93, 0xab, 0x71, 0x84, 0x5c, 0xe5, 0xa2, 0x46, 0x3b, 0x3e,
	0x6a, 0x75, 0xe5, 0x24, 0xc0, 0xee, 0x77, 0x84, 0xcf, 0x44, 0xf6, 0x6a, 0x72, 0x3e, 0x16, 0x5e,
	0xd2, 0xf4, 0xca, 0x5d, 0x38, 0xac, 0x19, 0x30, 0x5a, 0x97, 0x8c, 0xd6, 0xc8, 0x6a, 0xc6, 0x87,
	0x18, 0xc5, 0xa6, 0xab, 0xab, 0xfc, 0x89, 0xf0, 0x44, 0xec, 0x64, 0x4b, 0xc8, 0x5a, 0xda, 0x74,
	0x4e, 0xc8, 0x5a, 0xea, 0x20, 0xd5, 0x5e, 0x97, 0x1c, 0x2b, 0xe4, 0xd5, 0x38, 0x8e, 0x16, 0x77,
	0xbd, 0x5a, 0x06, 0xa2, 0xe4, 0x4b, 0x84, 0x47, 0xbb, 0x66, 0x18, 0x89, 0x7f, 0xb0, 0xe1, 0x21,
	0x98, 0x3b, 0x97, 0x4d, 0x19, 0x40, 0x9f, 0x93, 0xa0, 0x67, 0xc9, 0x0b, 0x71, 0xa0, 0xe5, 0x84,
	0xac, 0xb9, 0xd2, 0xaa, 0xb2, 0x72, 0x77, 0x3f, 0x8f, 0xee, 0xed, 0xe7, 0xd1, 0xdf, 0xfb, 0x79,
	0xf4, 0xf9, 0x41, 0x7e, 0xe0, 0xde, 0x41, 0x7e, 0xe0, 0xfe, 0x41, 0x7e, 0xe0, 0x9d, 0x85, 0xae,
	0xbd, 0xb2, 0xc7, 0xd3, 0x07, 0x1d, 0x5f, 0xed, 0xf5, 0xb2, 0x3e, 0x2c, 0xff, 0x00, 0xb2, 0xfc,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x8a, 0xd8, 0xc2, 0x7a, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of MainnetAccount items.
	GetMainnetAccount(ctx context.Context, in *QueryGetMainnetAccountRequest, opts ...grpc.CallOption) (*QueryGetMainnetAccountResponse, error)
	ListMainnetAccount(ctx context.Context, in *QueryAllMainnetAccountRequest, opts ...grpc.CallOption) (*QueryAllMainnetAccountResponse, error)
	// Queries a list of Project items.
	GetProject(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error)
	ListProject(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error)
	// Queries a list of ProjectChains items.
	GetProjectChains(ctx context.Context, in *QueryGetProjectChainsRequest, opts ...grpc.CallOption) (*QueryGetProjectChainsResponse, error)
	// Queries a list of SpecialAllocationsBalance items.
	SpecialAllocationsBalance(ctx context.Context, in *QuerySpecialAllocationsBalanceRequest, opts ...grpc.CallOption) (*QuerySpecialAllocationsBalanceResponse, error)
	// Queries a list of MainnetAccountBalance items.
	MainnetAccountBalance(ctx context.Context, in *QueryMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryMainnetAccountBalanceResponse, error)
	// Queries a list of ListMainnetAccountBalance items.
	ListMainnetAccountBalance(ctx context.Context, in *QueryListMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryListMainnetAccountBalanceResponse, error)
	// Queries a list of TotalShares items.
	TotalShares(ctx context.Context, in *QueryTotalSharesRequest, opts ...grpc.CallOption) (*QueryTotalSharesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMainnetAccount(ctx context.Context, in *QueryGetMainnetAccountRequest, opts ...grpc.CallOption) (*QueryGetMainnetAccountResponse, error) {
	out := new(QueryGetMainnetAccountResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/GetMainnetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMainnetAccount(ctx context.Context, in *QueryAllMainnetAccountRequest, opts ...grpc.CallOption) (*QueryAllMainnetAccountResponse, error) {
	out := new(QueryAllMainnetAccountResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/ListMainnetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProject(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error) {
	out := new(QueryGetProjectResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProject(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error) {
	out := new(QueryAllProjectResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/ListProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProjectChains(ctx context.Context, in *QueryGetProjectChainsRequest, opts ...grpc.CallOption) (*QueryGetProjectChainsResponse, error) {
	out := new(QueryGetProjectChainsResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/GetProjectChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecialAllocationsBalance(ctx context.Context, in *QuerySpecialAllocationsBalanceRequest, opts ...grpc.CallOption) (*QuerySpecialAllocationsBalanceResponse, error) {
	out := new(QuerySpecialAllocationsBalanceResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/SpecialAllocationsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MainnetAccountBalance(ctx context.Context, in *QueryMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryMainnetAccountBalanceResponse, error) {
	out := new(QueryMainnetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/MainnetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMainnetAccountBalance(ctx context.Context, in *QueryListMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryListMainnetAccountBalanceResponse, error) {
	out := new(QueryListMainnetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/ListMainnetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalShares(ctx context.Context, in *QueryTotalSharesRequest, opts ...grpc.CallOption) (*QueryTotalSharesResponse, error) {
	out := new(QueryTotalSharesResponse)
	err := c.cc.Invoke(ctx, "/network.project.v1.Query/TotalShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of MainnetAccount items.
	GetMainnetAccount(context.Context, *QueryGetMainnetAccountRequest) (*QueryGetMainnetAccountResponse, error)
	ListMainnetAccount(context.Context, *QueryAllMainnetAccountRequest) (*QueryAllMainnetAccountResponse, error)
	// Queries a list of Project items.
	GetProject(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error)
	ListProject(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error)
	// Queries a list of ProjectChains items.
	GetProjectChains(context.Context, *QueryGetProjectChainsRequest) (*QueryGetProjectChainsResponse, error)
	// Queries a list of SpecialAllocationsBalance items.
	SpecialAllocationsBalance(context.Context, *QuerySpecialAllocationsBalanceRequest) (*QuerySpecialAllocationsBalanceResponse, error)
	// Queries a list of MainnetAccountBalance items.
	MainnetAccountBalance(context.Context, *QueryMainnetAccountBalanceRequest) (*QueryMainnetAccountBalanceResponse, error)
	// Queries a list of ListMainnetAccountBalance items.
	ListMainnetAccountBalance(context.Context, *QueryListMainnetAccountBalanceRequest) (*QueryListMainnetAccountBalanceResponse, error)
	// Queries a list of TotalShares items.
	TotalShares(context.Context, *QueryTotalSharesRequest) (*QueryTotalSharesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetMainnetAccount(ctx context.Context, req *QueryGetMainnetAccountRequest) (*QueryGetMainnetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainnetAccount not implemented")
}
func (*UnimplementedQueryServer) ListMainnetAccount(ctx context.Context, req *QueryAllMainnetAccountRequest) (*QueryAllMainnetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMainnetAccount not implemented")
}
func (*UnimplementedQueryServer) GetProject(ctx context.Context, req *QueryGetProjectRequest) (*QueryGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedQueryServer) ListProject(ctx context.Context, req *QueryAllProjectRequest) (*QueryAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (*UnimplementedQueryServer) GetProjectChains(ctx context.Context, req *QueryGetProjectChainsRequest) (*QueryGetProjectChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectChains not implemented")
}
func (*UnimplementedQueryServer) SpecialAllocationsBalance(ctx context.Context, req *QuerySpecialAllocationsBalanceRequest) (*QuerySpecialAllocationsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecialAllocationsBalance not implemented")
}
func (*UnimplementedQueryServer) MainnetAccountBalance(ctx context.Context, req *QueryMainnetAccountBalanceRequest) (*QueryMainnetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainnetAccountBalance not implemented")
}
func (*UnimplementedQueryServer) ListMainnetAccountBalance(ctx context.Context, req *QueryListMainnetAccountBalanceRequest) (*QueryListMainnetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMainnetAccountBalance not implemented")
}
func (*UnimplementedQueryServer) TotalShares(ctx context.Context, req *QueryTotalSharesRequest) (*QueryTotalSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalShares not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMainnetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMainnetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMainnetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/GetMainnetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMainnetAccount(ctx, req.(*QueryGetMainnetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMainnetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMainnetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMainnetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/ListMainnetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMainnetAccount(ctx, req.(*QueryAllMainnetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProject(ctx, req.(*QueryGetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/ListProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProject(ctx, req.(*QueryAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProjectChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProjectChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/GetProjectChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProjectChains(ctx, req.(*QueryGetProjectChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecialAllocationsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecialAllocationsBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecialAllocationsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/SpecialAllocationsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecialAllocationsBalance(ctx, req.(*QuerySpecialAllocationsBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MainnetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMainnetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MainnetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/MainnetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MainnetAccountBalance(ctx, req.(*QueryMainnetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMainnetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListMainnetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMainnetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/ListMainnetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMainnetAccountBalance(ctx, req.(*QueryListMainnetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.project.v1.Query/TotalShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalShares(ctx, req.(*QueryTotalSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.project.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetMainnetAccount",
			Handler:    _Query_GetMainnetAccount_Handler,
		},
		{
			MethodName: "ListMainnetAccount",
			Handler:    _Query_ListMainnetAccount_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Query_GetProject_Handler,
		},
		{
			MethodName: "ListProject",
			Handler:    _Query_ListProject_Handler,
		},
		{
			MethodName: "GetProjectChains",
			Handler:    _Query_GetProjectChains_Handler,
		},
		{
			MethodName: "SpecialAllocationsBalance",
			Handler:    _Query_SpecialAllocationsBalance_Handler,
		},
		{
			MethodName: "MainnetAccountBalance",
			Handler:    _Query_MainnetAccountBalance_Handler,
		},
		{
			MethodName: "ListMainnetAccountBalance",
			Handler:    _Query_ListMainnetAccountBalance_Handler,
		},
		{
			MethodName: "TotalShares",
			Handler:    _Query_TotalShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/project/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMainnetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMainnetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMainnetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMainnetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMainnetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMainnetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MainnetAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMainnetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMainnetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMainnetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMainnetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMainnetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMainnetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MainnetAccount) > 0 {
		for iNdEx := len(m.MainnetAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MainnetAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Project) > 0 {
		for iNdEx := len(m.Project) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Project[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectChainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectChainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectChainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProjectChains.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpecialAllocationsBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecialAllocationsBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecialAllocationsBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpecialAllocationsBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecialAllocationsBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecialAllocationsBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimableAirdrop) > 0 {
		for iNdEx := len(m.ClaimableAirdrop) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimableAirdrop[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GenesisDistribution) > 0 {
		for iNdEx := len(m.GenesisDistribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GenesisDistribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMainnetAccountBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMainnetAccountBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMainnetAccountBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMainnetAccountBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMainnetAccountBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMainnetAccountBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MainnetAccountBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListMainnetAccountBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListMainnetAccountBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListMainnetAccountBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListMainnetAccountBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListMainnetAccountBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListMainnetAccountBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MainnetAccountBalance) > 0 {
		for iNdEx := len(m.MainnetAccountBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MainnetAccountBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalShares != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMainnetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMainnetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MainnetAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMainnetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMainnetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MainnetAccount) > 0 {
		for _, e := range m.MainnetAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	return n
}

func (m *QueryGetProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Project.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Project) > 0 {
		for _, e := range m.Project {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProjectChainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	return n
}

func (m *QueryGetProjectChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProjectChains.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySpecialAllocationsBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	return n
}

func (m *QuerySpecialAllocationsBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GenesisDistribution) > 0 {
		for _, e := range m.GenesisDistribution {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ClaimableAirdrop) > 0 {
		for _, e := range m.ClaimableAirdrop {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryMainnetAccountBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMainnetAccountBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MainnetAccountBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListMainnetAccountBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovQuery(uint64(m.ProjectID))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListMainnetAccountBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MainnetAccountBalance) > 0 {
		for _, e := range m.MainnetAccountBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalShares != 0 {
		n += 1 + sovQuery(uint64(m.TotalShares))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMainnetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMainnetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMainnetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMainnetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMainnetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMainnetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainnetAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMainnetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMainnetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMainnetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMainnetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMainnetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMainnetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainnetAccount = append(m.MainnetAccount, MainnetAccount{})
			if err := m.MainnetAccount[len(m.MainnetAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = append(m.Project, Project{})
			if err := m.Project[len(m.Project)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectChainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectChainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectChainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectChains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProjectChains.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecialAllocationsBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecialAllocationsBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecialAllocationsBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecialAllocationsBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecialAllocationsBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecialAllocationsBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisDistribution = append(m.GenesisDistribution, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.GenesisDistribution[len(m.GenesisDistribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableAirdrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimableAirdrop = append(m.ClaimableAirdrop, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.ClaimableAirdrop[len(m.ClaimableAirdrop)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMainnetAccountBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMainnetAccountBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMainnetAccountBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMainnetAccountBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMainnetAccountBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMainnetAccountBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainnetAccountBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListMainnetAccountBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListMainnetAccountBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListMainnetAccountBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListMainnetAccountBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListMainnetAccountBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListMainnetAccountBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetAccountBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainnetAccountBalance = append(m.MainnetAccountBalance, MainnetAccountBalance{})
			if err := m.MainnetAccountBalance[len(m.MainnetAccountBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
