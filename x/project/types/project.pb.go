// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/project/v1/project.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	ProjectID          uint64                                   `protobuf:"varint,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectName        string                                   `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	CoordinatorID      uint64                                   `protobuf:"varint,3,opt,name=coordinatorID,proto3" json:"coordinatorID,omitempty"`
	CreatedAt          int64                                    `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	MainnetID          uint64                                   `protobuf:"varint,5,opt,name=mainnetID,proto3" json:"mainnetID,omitempty"`
	MainnetInitialized bool                                     `protobuf:"varint,6,opt,name=mainnetInitialized,proto3" json:"mainnetInitialized,omitempty"`
	TotalSupply        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=totalSupply,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"totalSupply"`
	AllocatedShares    Shares                                   `protobuf:"bytes,8,rep,name=allocatedShares,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=Shares" json:"allocatedShares"`
	SpecialAllocations SpecialAllocations                       `protobuf:"bytes,9,opt,name=specialAllocations,proto3" json:"specialAllocations"`
	Metadata           []byte                                   `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_bce081b9714122e9, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectID() uint64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetCoordinatorID() uint64 {
	if m != nil {
		return m.CoordinatorID
	}
	return 0
}

func (m *Project) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Project) GetMainnetID() uint64 {
	if m != nil {
		return m.MainnetID
	}
	return 0
}

func (m *Project) GetMainnetInitialized() bool {
	if m != nil {
		return m.MainnetInitialized
	}
	return false
}

func (m *Project) GetTotalSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

func (m *Project) GetAllocatedShares() Shares {
	if m != nil {
		return m.AllocatedShares
	}
	return nil
}

func (m *Project) GetSpecialAllocations() SpecialAllocations {
	if m != nil {
		return m.SpecialAllocations
	}
	return SpecialAllocations{}
}

func (m *Project) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "network.project.v1.Project")
}

func init() { proto.RegisterFile("network/project/v1/project.proto", fileDescriptor_bce081b9714122e9) }

var fileDescriptor_bce081b9714122e9 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0xad, 0x69, 0xd7, 0xb5, 0xee, 0x10, 0xc2, 0xe2, 0x90, 0x55, 0x28, 0x8d, 0x10, 0x82, 0x30,
	0x41, 0xac, 0x8e, 0x4f, 0xb0, 0x6e, 0x97, 0x5d, 0x00, 0xa5, 0x37, 0x84, 0x54, 0xb9, 0x8e, 0xd5,
	0x99, 0x25, 0xfe, 0x85, 0xd8, 0x2b, 0x94, 0x4f, 0xc1, 0x81, 0x13, 0x12, 0x77, 0xc4, 0x01, 0xed,
	0x63, 0xec, 0xb8, 0x23, 0xa7, 0x81, 0xda, 0xc3, 0xbe, 0x03, 0x27, 0x94, 0xc4, 0xfd, 0x03, 0x2b,
	0x02, 0x2e, 0x89, 0x7f, 0xef, 0x3d, 0xff, 0xfc, 0xfc, 0xf3, 0xc3, 0x9e, 0x12, 0xe6, 0x35, 0x64,
	0xc7, 0x34, 0xcd, 0xe0, 0xa5, 0xe0, 0x86, 0x8e, 0xbb, 0xf3, 0x65, 0x90, 0x66, 0x60, 0x80, 0x10,
	0xab, 0x08, 0xe6, 0xf0, 0xb8, 0xdb, 0xbe, 0xc9, 0x12, 0xa9, 0x80, 0x16, 0xdf, 0x52, 0xd6, 0x76,
	0x39, 0xe8, 0x04, 0x34, 0x1d, 0x32, 0x2d, 0xe8, 0xb8, 0x3b, 0x14, 0x86, 0x75, 0x29, 0x07, 0xa9,
	0x2c, 0xbf, 0x5d, 0xf2, 0x83, 0xa2, 0xa2, 0x65, 0x61, 0xa9, 0x5b, 0x23, 0x18, 0x41, 0x89, 0xe7,
	0x2b, 0x8b, 0x3e, 0x5c, 0xe3, 0x4c, 0xa7, 0x82, 0x4b, 0x16, 0x0f, 0x58, 0x1c, 0x03, 0x67, 0x46,
	0x82, 0xb2, 0x3d, 0xee, 0x7c, 0xdc, 0xc0, 0x9b, 0xcf, 0x4a, 0x21, 0xb9, 0x8d, 0x9b, 0x76, 0xcf,
	0xe1, 0x81, 0x83, 0x3c, 0xe4, 0xd7, 0xc2, 0x25, 0x40, 0x3c, 0xdc, 0xb2, 0xc5, 0x13, 0x96, 0x08,
	0xe7, 0x9a, 0x87, 0xfc, 0x66, 0xb8, 0x0a, 0x91, 0xbb, 0xf8, 0x3a, 0x07, 0xc8, 0x22, 0xa9, 0x98,
	0x81, 0xec, 0xf0, 0xc0, 0xa9, 0x16, 0x3d, 0x7e, 0x05, 0xf3, 0x53, 0x78, 0x26, 0x98, 0x11, 0xd1,
	0x9e, 0x71, 0x6a, 0x1e, 0xf2, 0xab, 0xe1, 0x12, 0xc8, 0xd9, 0x84, 0x49, 0xa5, 0x44, 0xee, 0x61,
	0xa3, 0xf4, 0xb0, 0x00, 0x48, 0x80, 0xc9, 0xbc, 0x50, 0xd2, 0x48, 0x16, 0xcb, 0xb7, 0x22, 0x72,
	0xea, 0x1e, 0xf2, 0x1b, 0xe1, 0x1a, 0x86, 0x7c, 0x41, 0xb8, 0x65, 0xc0, 0xb0, 0xb8, 0x7f, 0x92,
	0xa6, 0xf1, 0xc4, 0xd9, 0xf4, 0xaa, 0x7e, 0x6b, 0x77, 0x3b, 0xb0, 0x63, 0xcc, 0x67, 0x1e, 0xd8,
	0x99, 0x07, 0xfb, 0x20, 0x55, 0xef, 0xd5, 0xd9, 0x45, 0xa7, 0xf2, 0xe3, 0xa2, 0x73, 0x7f, 0x24,
	0xcd, 0xd1, 0xc9, 0x30, 0xe0, 0x90, 0xd8, 0x99, 0xdb, 0xdf, 0x23, 0x1d, 0x1d, 0x53, 0x33, 0x49,
	0x85, 0x2e, 0x36, 0x7c, 0xfe, 0xd6, 0xf1, 0xff, 0x51, 0xaa, 0x3f, 0x5c, 0x9e, 0xee, 0x6c, 0xc5,
	0x62, 0xc4, 0xf8, 0x64, 0x90, 0x3f, 0xb0, 0xfe, 0x74, 0x79, 0xba, 0x83, 0xc2, 0x55, 0x83, 0xe4,
	0x3d, 0xc2, 0x37, 0xec, 0x23, 0x89, 0xa8, 0x7f, 0xc4, 0x32, 0xa1, 0x9d, 0xc6, 0xdf, 0x4c, 0x3f,
	0xfd, 0x7f, 0xd3, 0xf5, 0xb2, 0xf7, 0x1f, 0x2c, 0xfd, 0x6e, 0x81, 0xbc, 0xc0, 0xc4, 0x46, 0x68,
	0x6f, 0x99, 0x20, 0xa7, 0xe9, 0x21, 0xbf, 0xb5, 0x7b, 0x2f, 0xb8, 0x1a, 0xf4, 0xa0, 0x7f, 0x45,
	0xdd, 0xab, 0xe5, 0x2e, 0xc3, 0x35, 0x7d, 0x48, 0x1b, 0x37, 0x12, 0x61, 0x58, 0xc4, 0x0c, 0x73,
	0xb0, 0x87, 0xfc, 0xad, 0x70, 0x51, 0xf7, 0xf6, 0xcf, 0xa6, 0x2e, 0x3a, 0x9f, 0xba, 0xe8, 0xfb,
	0xd4, 0x45, 0xef, 0x66, 0x6e, 0xe5, 0x7c, 0xe6, 0x56, 0xbe, 0xce, 0xdc, 0xca, 0xf3, 0x07, 0x2b,
	0xb7, 0x95, 0x23, 0x25, 0x8d, 0xa0, 0xf3, 0xe4, 0xbf, 0x59, 0x64, 0xbf, 0xb8, 0xf4, 0xb0, 0x5e,
	0x64, 0xfd, 0xf1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x52, 0xf8, 0x82, 0xb5, 0x03, 0x00,
	0x00,
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.SpecialAllocations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.AllocatedShares) > 0 {
		for iNdEx := len(m.AllocatedShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllocatedShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TotalSupply) > 0 {
		for iNdEx := len(m.TotalSupply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalSupply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MainnetInitialized {
		i--
		if m.MainnetInitialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MainnetID != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.MainnetID))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedAt != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.CoordinatorID != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.CoordinatorID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectID != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProject(dAtA []byte, offset int, v uint64) int {
	offset -= sovProject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectID != 0 {
		n += 1 + sovProject(uint64(m.ProjectID))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if m.CoordinatorID != 0 {
		n += 1 + sovProject(uint64(m.CoordinatorID))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovProject(uint64(m.CreatedAt))
	}
	if m.MainnetID != 0 {
		n += 1 + sovProject(uint64(m.MainnetID))
	}
	if m.MainnetInitialized {
		n += 2
	}
	if len(m.TotalSupply) > 0 {
		for _, e := range m.TotalSupply {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	if len(m.AllocatedShares) > 0 {
		for _, e := range m.AllocatedShares {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	l = m.SpecialAllocations.Size()
	n += 1 + l + sovProject(uint64(l))
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func sovProject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProject(x uint64) (n int) {
	return sovProject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorID", wireType)
			}
			m.CoordinatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoordinatorID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetID", wireType)
			}
			m.MainnetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainnetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainnetInitialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainnetInitialized = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = append(m.TotalSupply, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.TotalSupply[len(m.TotalSupply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedShares = append(m.AllocatedShares, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.AllocatedShares[len(m.AllocatedShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecialAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProject = fmt.Errorf("proto: unexpected end of group")
)
