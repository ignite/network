// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: network/project/v1/query.proto

package projectv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                    = "/network.project.v1.Query/Params"
	Query_GetMainnetAccount_FullMethodName         = "/network.project.v1.Query/GetMainnetAccount"
	Query_ListMainnetAccount_FullMethodName        = "/network.project.v1.Query/ListMainnetAccount"
	Query_GetProject_FullMethodName                = "/network.project.v1.Query/GetProject"
	Query_ListProject_FullMethodName               = "/network.project.v1.Query/ListProject"
	Query_GetProjectChains_FullMethodName          = "/network.project.v1.Query/GetProjectChains"
	Query_SpecialAllocationsBalance_FullMethodName = "/network.project.v1.Query/SpecialAllocationsBalance"
	Query_MainnetAccountBalance_FullMethodName     = "/network.project.v1.Query/MainnetAccountBalance"
	Query_ListMainnetAccountBalance_FullMethodName = "/network.project.v1.Query/ListMainnetAccountBalance"
	Query_TotalShares_FullMethodName               = "/network.project.v1.Query/TotalShares"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of MainnetAccount items.
	GetMainnetAccount(ctx context.Context, in *QueryGetMainnetAccountRequest, opts ...grpc.CallOption) (*QueryGetMainnetAccountResponse, error)
	ListMainnetAccount(ctx context.Context, in *QueryAllMainnetAccountRequest, opts ...grpc.CallOption) (*QueryAllMainnetAccountResponse, error)
	// Queries a list of Project items.
	GetProject(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error)
	ListProject(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error)
	// Queries a list of ProjectChains items.
	GetProjectChains(ctx context.Context, in *QueryGetProjectChainsRequest, opts ...grpc.CallOption) (*QueryGetProjectChainsResponse, error)
	// Queries a list of SpecialAllocationsBalance items.
	SpecialAllocationsBalance(ctx context.Context, in *QuerySpecialAllocationsBalanceRequest, opts ...grpc.CallOption) (*QuerySpecialAllocationsBalanceResponse, error)
	// Queries a list of MainnetAccountBalance items.
	MainnetAccountBalance(ctx context.Context, in *QueryMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryMainnetAccountBalanceResponse, error)
	// Queries a list of ListMainnetAccountBalance items.
	ListMainnetAccountBalance(ctx context.Context, in *QueryListMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryListMainnetAccountBalanceResponse, error)
	// Queries a list of TotalShares items.
	TotalShares(ctx context.Context, in *QueryTotalSharesRequest, opts ...grpc.CallOption) (*QueryTotalSharesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMainnetAccount(ctx context.Context, in *QueryGetMainnetAccountRequest, opts ...grpc.CallOption) (*QueryGetMainnetAccountResponse, error) {
	out := new(QueryGetMainnetAccountResponse)
	err := c.cc.Invoke(ctx, Query_GetMainnetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMainnetAccount(ctx context.Context, in *QueryAllMainnetAccountRequest, opts ...grpc.CallOption) (*QueryAllMainnetAccountResponse, error) {
	out := new(QueryAllMainnetAccountResponse)
	err := c.cc.Invoke(ctx, Query_ListMainnetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProject(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error) {
	out := new(QueryGetProjectResponse)
	err := c.cc.Invoke(ctx, Query_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProject(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error) {
	out := new(QueryAllProjectResponse)
	err := c.cc.Invoke(ctx, Query_ListProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProjectChains(ctx context.Context, in *QueryGetProjectChainsRequest, opts ...grpc.CallOption) (*QueryGetProjectChainsResponse, error) {
	out := new(QueryGetProjectChainsResponse)
	err := c.cc.Invoke(ctx, Query_GetProjectChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecialAllocationsBalance(ctx context.Context, in *QuerySpecialAllocationsBalanceRequest, opts ...grpc.CallOption) (*QuerySpecialAllocationsBalanceResponse, error) {
	out := new(QuerySpecialAllocationsBalanceResponse)
	err := c.cc.Invoke(ctx, Query_SpecialAllocationsBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MainnetAccountBalance(ctx context.Context, in *QueryMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryMainnetAccountBalanceResponse, error) {
	out := new(QueryMainnetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, Query_MainnetAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMainnetAccountBalance(ctx context.Context, in *QueryListMainnetAccountBalanceRequest, opts ...grpc.CallOption) (*QueryListMainnetAccountBalanceResponse, error) {
	out := new(QueryListMainnetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, Query_ListMainnetAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalShares(ctx context.Context, in *QueryTotalSharesRequest, opts ...grpc.CallOption) (*QueryTotalSharesResponse, error) {
	out := new(QueryTotalSharesResponse)
	err := c.cc.Invoke(ctx, Query_TotalShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of MainnetAccount items.
	GetMainnetAccount(context.Context, *QueryGetMainnetAccountRequest) (*QueryGetMainnetAccountResponse, error)
	ListMainnetAccount(context.Context, *QueryAllMainnetAccountRequest) (*QueryAllMainnetAccountResponse, error)
	// Queries a list of Project items.
	GetProject(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error)
	ListProject(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error)
	// Queries a list of ProjectChains items.
	GetProjectChains(context.Context, *QueryGetProjectChainsRequest) (*QueryGetProjectChainsResponse, error)
	// Queries a list of SpecialAllocationsBalance items.
	SpecialAllocationsBalance(context.Context, *QuerySpecialAllocationsBalanceRequest) (*QuerySpecialAllocationsBalanceResponse, error)
	// Queries a list of MainnetAccountBalance items.
	MainnetAccountBalance(context.Context, *QueryMainnetAccountBalanceRequest) (*QueryMainnetAccountBalanceResponse, error)
	// Queries a list of ListMainnetAccountBalance items.
	ListMainnetAccountBalance(context.Context, *QueryListMainnetAccountBalanceRequest) (*QueryListMainnetAccountBalanceResponse, error)
	// Queries a list of TotalShares items.
	TotalShares(context.Context, *QueryTotalSharesRequest) (*QueryTotalSharesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetMainnetAccount(context.Context, *QueryGetMainnetAccountRequest) (*QueryGetMainnetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainnetAccount not implemented")
}
func (UnimplementedQueryServer) ListMainnetAccount(context.Context, *QueryAllMainnetAccountRequest) (*QueryAllMainnetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMainnetAccount not implemented")
}
func (UnimplementedQueryServer) GetProject(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedQueryServer) ListProject(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (UnimplementedQueryServer) GetProjectChains(context.Context, *QueryGetProjectChainsRequest) (*QueryGetProjectChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectChains not implemented")
}
func (UnimplementedQueryServer) SpecialAllocationsBalance(context.Context, *QuerySpecialAllocationsBalanceRequest) (*QuerySpecialAllocationsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecialAllocationsBalance not implemented")
}
func (UnimplementedQueryServer) MainnetAccountBalance(context.Context, *QueryMainnetAccountBalanceRequest) (*QueryMainnetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MainnetAccountBalance not implemented")
}
func (UnimplementedQueryServer) ListMainnetAccountBalance(context.Context, *QueryListMainnetAccountBalanceRequest) (*QueryListMainnetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMainnetAccountBalance not implemented")
}
func (UnimplementedQueryServer) TotalShares(context.Context, *QueryTotalSharesRequest) (*QueryTotalSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalShares not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMainnetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMainnetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMainnetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMainnetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMainnetAccount(ctx, req.(*QueryGetMainnetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMainnetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMainnetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMainnetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListMainnetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMainnetAccount(ctx, req.(*QueryAllMainnetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProject(ctx, req.(*QueryGetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProject(ctx, req.(*QueryAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProjectChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProjectChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProjectChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProjectChains(ctx, req.(*QueryGetProjectChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecialAllocationsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecialAllocationsBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecialAllocationsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpecialAllocationsBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecialAllocationsBalance(ctx, req.(*QuerySpecialAllocationsBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MainnetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMainnetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MainnetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MainnetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MainnetAccountBalance(ctx, req.(*QueryMainnetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMainnetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListMainnetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMainnetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListMainnetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMainnetAccountBalance(ctx, req.(*QueryListMainnetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TotalShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalShares(ctx, req.(*QueryTotalSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.project.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetMainnetAccount",
			Handler:    _Query_GetMainnetAccount_Handler,
		},
		{
			MethodName: "ListMainnetAccount",
			Handler:    _Query_ListMainnetAccount_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Query_GetProject_Handler,
		},
		{
			MethodName: "ListProject",
			Handler:    _Query_ListProject_Handler,
		},
		{
			MethodName: "GetProjectChains",
			Handler:    _Query_GetProjectChains_Handler,
		},
		{
			MethodName: "SpecialAllocationsBalance",
			Handler:    _Query_SpecialAllocationsBalance_Handler,
		},
		{
			MethodName: "MainnetAccountBalance",
			Handler:    _Query_MainnetAccountBalance_Handler,
		},
		{
			MethodName: "ListMainnetAccountBalance",
			Handler:    _Query_ListMainnetAccountBalance_Handler,
		},
		{
			MethodName: "TotalShares",
			Handler:    _Query_TotalShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/project/v1/query.proto",
}
