// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: network/monitoringc/v1/query.proto

package monitoringcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                    = "/network.monitoringc.v1.Query/Params"
	Query_GetLaunchIDFromChannelID_FullMethodName  = "/network.monitoringc.v1.Query/GetLaunchIDFromChannelID"
	Query_ListLaunchIDFromChannelID_FullMethodName = "/network.monitoringc.v1.Query/ListLaunchIDFromChannelID"
	Query_GetMonitoringHistory_FullMethodName      = "/network.monitoringc.v1.Query/GetMonitoringHistory"
	Query_GetVerifiedClientID_FullMethodName       = "/network.monitoringc.v1.Query/GetVerifiedClientID"
	Query_GetProviderClientID_FullMethodName       = "/network.monitoringc.v1.Query/GetProviderClientID"
	Query_ListProviderClientID_FullMethodName      = "/network.monitoringc.v1.Query/ListProviderClientID"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of LaunchIDFromChannelID items.
	GetLaunchIDFromChannelID(ctx context.Context, in *QueryGetLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromChannelIDResponse, error)
	ListLaunchIDFromChannelID(ctx context.Context, in *QueryAllLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromChannelIDResponse, error)
	// Queries a list of MonitoringHistory items.
	GetMonitoringHistory(ctx context.Context, in *QueryGetMonitoringHistoryRequest, opts ...grpc.CallOption) (*QueryGetMonitoringHistoryResponse, error)
	// Queries a list of VerifiedClientID items.
	GetVerifiedClientID(ctx context.Context, in *QueryGetVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryGetVerifiedClientIDResponse, error)
	// Queries a list of ProviderClientID items.
	GetProviderClientID(ctx context.Context, in *QueryGetProviderClientIDRequest, opts ...grpc.CallOption) (*QueryGetProviderClientIDResponse, error)
	ListProviderClientID(ctx context.Context, in *QueryAllProviderClientIDRequest, opts ...grpc.CallOption) (*QueryAllProviderClientIDResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLaunchIDFromChannelID(ctx context.Context, in *QueryGetLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryGetLaunchIDFromChannelIDResponse, error) {
	out := new(QueryGetLaunchIDFromChannelIDResponse)
	err := c.cc.Invoke(ctx, Query_GetLaunchIDFromChannelID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListLaunchIDFromChannelID(ctx context.Context, in *QueryAllLaunchIDFromChannelIDRequest, opts ...grpc.CallOption) (*QueryAllLaunchIDFromChannelIDResponse, error) {
	out := new(QueryAllLaunchIDFromChannelIDResponse)
	err := c.cc.Invoke(ctx, Query_ListLaunchIDFromChannelID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMonitoringHistory(ctx context.Context, in *QueryGetMonitoringHistoryRequest, opts ...grpc.CallOption) (*QueryGetMonitoringHistoryResponse, error) {
	out := new(QueryGetMonitoringHistoryResponse)
	err := c.cc.Invoke(ctx, Query_GetMonitoringHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVerifiedClientID(ctx context.Context, in *QueryGetVerifiedClientIDRequest, opts ...grpc.CallOption) (*QueryGetVerifiedClientIDResponse, error) {
	out := new(QueryGetVerifiedClientIDResponse)
	err := c.cc.Invoke(ctx, Query_GetVerifiedClientID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProviderClientID(ctx context.Context, in *QueryGetProviderClientIDRequest, opts ...grpc.CallOption) (*QueryGetProviderClientIDResponse, error) {
	out := new(QueryGetProviderClientIDResponse)
	err := c.cc.Invoke(ctx, Query_GetProviderClientID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListProviderClientID(ctx context.Context, in *QueryAllProviderClientIDRequest, opts ...grpc.CallOption) (*QueryAllProviderClientIDResponse, error) {
	out := new(QueryAllProviderClientIDResponse)
	err := c.cc.Invoke(ctx, Query_ListProviderClientID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of LaunchIDFromChannelID items.
	GetLaunchIDFromChannelID(context.Context, *QueryGetLaunchIDFromChannelIDRequest) (*QueryGetLaunchIDFromChannelIDResponse, error)
	ListLaunchIDFromChannelID(context.Context, *QueryAllLaunchIDFromChannelIDRequest) (*QueryAllLaunchIDFromChannelIDResponse, error)
	// Queries a list of MonitoringHistory items.
	GetMonitoringHistory(context.Context, *QueryGetMonitoringHistoryRequest) (*QueryGetMonitoringHistoryResponse, error)
	// Queries a list of VerifiedClientID items.
	GetVerifiedClientID(context.Context, *QueryGetVerifiedClientIDRequest) (*QueryGetVerifiedClientIDResponse, error)
	// Queries a list of ProviderClientID items.
	GetProviderClientID(context.Context, *QueryGetProviderClientIDRequest) (*QueryGetProviderClientIDResponse, error)
	ListProviderClientID(context.Context, *QueryAllProviderClientIDRequest) (*QueryAllProviderClientIDResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetLaunchIDFromChannelID(context.Context, *QueryGetLaunchIDFromChannelIDRequest) (*QueryGetLaunchIDFromChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaunchIDFromChannelID not implemented")
}
func (UnimplementedQueryServer) ListLaunchIDFromChannelID(context.Context, *QueryAllLaunchIDFromChannelIDRequest) (*QueryAllLaunchIDFromChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunchIDFromChannelID not implemented")
}
func (UnimplementedQueryServer) GetMonitoringHistory(context.Context, *QueryGetMonitoringHistoryRequest) (*QueryGetMonitoringHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitoringHistory not implemented")
}
func (UnimplementedQueryServer) GetVerifiedClientID(context.Context, *QueryGetVerifiedClientIDRequest) (*QueryGetVerifiedClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifiedClientID not implemented")
}
func (UnimplementedQueryServer) GetProviderClientID(context.Context, *QueryGetProviderClientIDRequest) (*QueryGetProviderClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderClientID not implemented")
}
func (UnimplementedQueryServer) ListProviderClientID(context.Context, *QueryAllProviderClientIDRequest) (*QueryAllProviderClientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviderClientID not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLaunchIDFromChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLaunchIDFromChannelIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLaunchIDFromChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLaunchIDFromChannelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLaunchIDFromChannelID(ctx, req.(*QueryGetLaunchIDFromChannelIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListLaunchIDFromChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLaunchIDFromChannelIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListLaunchIDFromChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListLaunchIDFromChannelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListLaunchIDFromChannelID(ctx, req.(*QueryAllLaunchIDFromChannelIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMonitoringHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMonitoringHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMonitoringHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMonitoringHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMonitoringHistory(ctx, req.(*QueryGetMonitoringHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVerifiedClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerifiedClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVerifiedClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetVerifiedClientID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVerifiedClientID(ctx, req.(*QueryGetVerifiedClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProviderClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProviderClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProviderClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProviderClientID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProviderClientID(ctx, req.(*QueryGetProviderClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListProviderClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProviderClientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListProviderClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListProviderClientID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListProviderClientID(ctx, req.(*QueryAllProviderClientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.monitoringc.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetLaunchIDFromChannelID",
			Handler:    _Query_GetLaunchIDFromChannelID_Handler,
		},
		{
			MethodName: "ListLaunchIDFromChannelID",
			Handler:    _Query_ListLaunchIDFromChannelID_Handler,
		},
		{
			MethodName: "GetMonitoringHistory",
			Handler:    _Query_GetMonitoringHistory_Handler,
		},
		{
			MethodName: "GetVerifiedClientID",
			Handler:    _Query_GetVerifiedClientID_Handler,
		},
		{
			MethodName: "GetProviderClientID",
			Handler:    _Query_GetProviderClientID_Handler,
		},
		{
			MethodName: "ListProviderClientID",
			Handler:    _Query_ListProviderClientID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/monitoringc/v1/query.proto",
}
