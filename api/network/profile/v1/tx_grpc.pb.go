// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: network/profile/v1/tx.proto

package profilev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                 = "/network.profile.v1.Msg/UpdateParams"
	Msg_UpdateValidatorDescription_FullMethodName   = "/network.profile.v1.Msg/UpdateValidatorDescription"
	Msg_AddValidatorOperatorAddress_FullMethodName  = "/network.profile.v1.Msg/AddValidatorOperatorAddress"
	Msg_CreateCoordinator_FullMethodName            = "/network.profile.v1.Msg/CreateCoordinator"
	Msg_UpdateCoordinatorDescription_FullMethodName = "/network.profile.v1.Msg/UpdateCoordinatorDescription"
	Msg_UpdateCoordinatorAddress_FullMethodName     = "/network.profile.v1.Msg/UpdateCoordinatorAddress"
	Msg_DisableCoordinator_FullMethodName           = "/network.profile.v1.Msg/DisableCoordinator"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateValidatorDescription(ctx context.Context, in *MsgUpdateValidatorDescription, opts ...grpc.CallOption) (*MsgUpdateValidatorDescriptionResponse, error)
	AddValidatorOperatorAddress(ctx context.Context, in *MsgAddValidatorOperatorAddress, opts ...grpc.CallOption) (*MsgAddValidatorOperatorAddressResponse, error)
	CreateCoordinator(ctx context.Context, in *MsgCreateCoordinator, opts ...grpc.CallOption) (*MsgCreateCoordinatorResponse, error)
	UpdateCoordinatorDescription(ctx context.Context, in *MsgUpdateCoordinatorDescription, opts ...grpc.CallOption) (*MsgUpdateCoordinatorDescriptionResponse, error)
	UpdateCoordinatorAddress(ctx context.Context, in *MsgUpdateCoordinatorAddress, opts ...grpc.CallOption) (*MsgUpdateCoordinatorAddressResponse, error)
	DisableCoordinator(ctx context.Context, in *MsgDisableCoordinator, opts ...grpc.CallOption) (*MsgDisableCoordinatorResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateValidatorDescription(ctx context.Context, in *MsgUpdateValidatorDescription, opts ...grpc.CallOption) (*MsgUpdateValidatorDescriptionResponse, error) {
	out := new(MsgUpdateValidatorDescriptionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateValidatorDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddValidatorOperatorAddress(ctx context.Context, in *MsgAddValidatorOperatorAddress, opts ...grpc.CallOption) (*MsgAddValidatorOperatorAddressResponse, error) {
	out := new(MsgAddValidatorOperatorAddressResponse)
	err := c.cc.Invoke(ctx, Msg_AddValidatorOperatorAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCoordinator(ctx context.Context, in *MsgCreateCoordinator, opts ...grpc.CallOption) (*MsgCreateCoordinatorResponse, error) {
	out := new(MsgCreateCoordinatorResponse)
	err := c.cc.Invoke(ctx, Msg_CreateCoordinator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCoordinatorDescription(ctx context.Context, in *MsgUpdateCoordinatorDescription, opts ...grpc.CallOption) (*MsgUpdateCoordinatorDescriptionResponse, error) {
	out := new(MsgUpdateCoordinatorDescriptionResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCoordinatorDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCoordinatorAddress(ctx context.Context, in *MsgUpdateCoordinatorAddress, opts ...grpc.CallOption) (*MsgUpdateCoordinatorAddressResponse, error) {
	out := new(MsgUpdateCoordinatorAddressResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateCoordinatorAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableCoordinator(ctx context.Context, in *MsgDisableCoordinator, opts ...grpc.CallOption) (*MsgDisableCoordinatorResponse, error) {
	out := new(MsgDisableCoordinatorResponse)
	err := c.cc.Invoke(ctx, Msg_DisableCoordinator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	UpdateValidatorDescription(context.Context, *MsgUpdateValidatorDescription) (*MsgUpdateValidatorDescriptionResponse, error)
	AddValidatorOperatorAddress(context.Context, *MsgAddValidatorOperatorAddress) (*MsgAddValidatorOperatorAddressResponse, error)
	CreateCoordinator(context.Context, *MsgCreateCoordinator) (*MsgCreateCoordinatorResponse, error)
	UpdateCoordinatorDescription(context.Context, *MsgUpdateCoordinatorDescription) (*MsgUpdateCoordinatorDescriptionResponse, error)
	UpdateCoordinatorAddress(context.Context, *MsgUpdateCoordinatorAddress) (*MsgUpdateCoordinatorAddressResponse, error)
	DisableCoordinator(context.Context, *MsgDisableCoordinator) (*MsgDisableCoordinatorResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UpdateValidatorDescription(context.Context, *MsgUpdateValidatorDescription) (*MsgUpdateValidatorDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidatorDescription not implemented")
}
func (UnimplementedMsgServer) AddValidatorOperatorAddress(context.Context, *MsgAddValidatorOperatorAddress) (*MsgAddValidatorOperatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddValidatorOperatorAddress not implemented")
}
func (UnimplementedMsgServer) CreateCoordinator(context.Context, *MsgCreateCoordinator) (*MsgCreateCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoordinator not implemented")
}
func (UnimplementedMsgServer) UpdateCoordinatorDescription(context.Context, *MsgUpdateCoordinatorDescription) (*MsgUpdateCoordinatorDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoordinatorDescription not implemented")
}
func (UnimplementedMsgServer) UpdateCoordinatorAddress(context.Context, *MsgUpdateCoordinatorAddress) (*MsgUpdateCoordinatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoordinatorAddress not implemented")
}
func (UnimplementedMsgServer) DisableCoordinator(context.Context, *MsgDisableCoordinator) (*MsgDisableCoordinatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCoordinator not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateValidatorDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateValidatorDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateValidatorDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateValidatorDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateValidatorDescription(ctx, req.(*MsgUpdateValidatorDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddValidatorOperatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddValidatorOperatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddValidatorOperatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddValidatorOperatorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddValidatorOperatorAddress(ctx, req.(*MsgAddValidatorOperatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCoordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCoordinator(ctx, req.(*MsgCreateCoordinator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCoordinatorDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCoordinatorDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCoordinatorDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCoordinatorDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCoordinatorDescription(ctx, req.(*MsgUpdateCoordinatorDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCoordinatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCoordinatorAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCoordinatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateCoordinatorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCoordinatorAddress(ctx, req.(*MsgUpdateCoordinatorAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableCoordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DisableCoordinator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableCoordinator(ctx, req.(*MsgDisableCoordinator))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.profile.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateValidatorDescription",
			Handler:    _Msg_UpdateValidatorDescription_Handler,
		},
		{
			MethodName: "AddValidatorOperatorAddress",
			Handler:    _Msg_AddValidatorOperatorAddress_Handler,
		},
		{
			MethodName: "CreateCoordinator",
			Handler:    _Msg_CreateCoordinator_Handler,
		},
		{
			MethodName: "UpdateCoordinatorDescription",
			Handler:    _Msg_UpdateCoordinatorDescription_Handler,
		},
		{
			MethodName: "UpdateCoordinatorAddress",
			Handler:    _Msg_UpdateCoordinatorAddress_Handler,
		},
		{
			MethodName: "DisableCoordinator",
			Handler:    _Msg_DisableCoordinator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/profile/v1/tx.proto",
}
