// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: network/launch/v1/query.proto

package launchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/network.launch.v1.Query/Params"
	Query_GetChain_FullMethodName             = "/network.launch.v1.Query/GetChain"
	Query_ListChain_FullMethodName            = "/network.launch.v1.Query/ListChain"
	Query_GetGenesisAccount_FullMethodName    = "/network.launch.v1.Query/GetGenesisAccount"
	Query_ListGenesisAccount_FullMethodName   = "/network.launch.v1.Query/ListGenesisAccount"
	Query_GetGenesisValidator_FullMethodName  = "/network.launch.v1.Query/GetGenesisValidator"
	Query_ListGenesisValidator_FullMethodName = "/network.launch.v1.Query/ListGenesisValidator"
	Query_GetVestingAccount_FullMethodName    = "/network.launch.v1.Query/GetVestingAccount"
	Query_ListVestingAccount_FullMethodName   = "/network.launch.v1.Query/ListVestingAccount"
	Query_GetRequest_FullMethodName           = "/network.launch.v1.Query/GetRequest"
	Query_ListRequest_FullMethodName          = "/network.launch.v1.Query/ListRequest"
	Query_ListParamChange_FullMethodName      = "/network.launch.v1.Query/ListParamChange"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Chain items.
	GetChain(ctx context.Context, in *QueryGetChainRequest, opts ...grpc.CallOption) (*QueryGetChainResponse, error)
	ListChain(ctx context.Context, in *QueryAllChainRequest, opts ...grpc.CallOption) (*QueryAllChainResponse, error)
	// Queries a list of GenesisAccount items.
	GetGenesisAccount(ctx context.Context, in *QueryGetGenesisAccountRequest, opts ...grpc.CallOption) (*QueryGetGenesisAccountResponse, error)
	ListGenesisAccount(ctx context.Context, in *QueryAllGenesisAccountRequest, opts ...grpc.CallOption) (*QueryAllGenesisAccountResponse, error)
	// Queries a list of GenesisValidator items.
	GetGenesisValidator(ctx context.Context, in *QueryGetGenesisValidatorRequest, opts ...grpc.CallOption) (*QueryGetGenesisValidatorResponse, error)
	ListGenesisValidator(ctx context.Context, in *QueryAllGenesisValidatorRequest, opts ...grpc.CallOption) (*QueryAllGenesisValidatorResponse, error)
	// Queries a list of VestingAccount items.
	GetVestingAccount(ctx context.Context, in *QueryGetVestingAccountRequest, opts ...grpc.CallOption) (*QueryGetVestingAccountResponse, error)
	ListVestingAccount(ctx context.Context, in *QueryAllVestingAccountRequest, opts ...grpc.CallOption) (*QueryAllVestingAccountResponse, error)
	// Queries a list of Request items.
	GetRequest(ctx context.Context, in *QueryGetRequestRequest, opts ...grpc.CallOption) (*QueryGetRequestResponse, error)
	ListRequest(ctx context.Context, in *QueryAllRequestRequest, opts ...grpc.CallOption) (*QueryAllRequestResponse, error)
	ListParamChange(ctx context.Context, in *QueryAllParamChangeRequest, opts ...grpc.CallOption) (*QueryAllParamChangeResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChain(ctx context.Context, in *QueryGetChainRequest, opts ...grpc.CallOption) (*QueryGetChainResponse, error) {
	out := new(QueryGetChainResponse)
	err := c.cc.Invoke(ctx, Query_GetChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListChain(ctx context.Context, in *QueryAllChainRequest, opts ...grpc.CallOption) (*QueryAllChainResponse, error) {
	out := new(QueryAllChainResponse)
	err := c.cc.Invoke(ctx, Query_ListChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGenesisAccount(ctx context.Context, in *QueryGetGenesisAccountRequest, opts ...grpc.CallOption) (*QueryGetGenesisAccountResponse, error) {
	out := new(QueryGetGenesisAccountResponse)
	err := c.cc.Invoke(ctx, Query_GetGenesisAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGenesisAccount(ctx context.Context, in *QueryAllGenesisAccountRequest, opts ...grpc.CallOption) (*QueryAllGenesisAccountResponse, error) {
	out := new(QueryAllGenesisAccountResponse)
	err := c.cc.Invoke(ctx, Query_ListGenesisAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGenesisValidator(ctx context.Context, in *QueryGetGenesisValidatorRequest, opts ...grpc.CallOption) (*QueryGetGenesisValidatorResponse, error) {
	out := new(QueryGetGenesisValidatorResponse)
	err := c.cc.Invoke(ctx, Query_GetGenesisValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGenesisValidator(ctx context.Context, in *QueryAllGenesisValidatorRequest, opts ...grpc.CallOption) (*QueryAllGenesisValidatorResponse, error) {
	out := new(QueryAllGenesisValidatorResponse)
	err := c.cc.Invoke(ctx, Query_ListGenesisValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVestingAccount(ctx context.Context, in *QueryGetVestingAccountRequest, opts ...grpc.CallOption) (*QueryGetVestingAccountResponse, error) {
	out := new(QueryGetVestingAccountResponse)
	err := c.cc.Invoke(ctx, Query_GetVestingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListVestingAccount(ctx context.Context, in *QueryAllVestingAccountRequest, opts ...grpc.CallOption) (*QueryAllVestingAccountResponse, error) {
	out := new(QueryAllVestingAccountResponse)
	err := c.cc.Invoke(ctx, Query_ListVestingAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRequest(ctx context.Context, in *QueryGetRequestRequest, opts ...grpc.CallOption) (*QueryGetRequestResponse, error) {
	out := new(QueryGetRequestResponse)
	err := c.cc.Invoke(ctx, Query_GetRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRequest(ctx context.Context, in *QueryAllRequestRequest, opts ...grpc.CallOption) (*QueryAllRequestResponse, error) {
	out := new(QueryAllRequestResponse)
	err := c.cc.Invoke(ctx, Query_ListRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListParamChange(ctx context.Context, in *QueryAllParamChangeRequest, opts ...grpc.CallOption) (*QueryAllParamChangeResponse, error) {
	out := new(QueryAllParamChangeResponse)
	err := c.cc.Invoke(ctx, Query_ListParamChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Chain items.
	GetChain(context.Context, *QueryGetChainRequest) (*QueryGetChainResponse, error)
	ListChain(context.Context, *QueryAllChainRequest) (*QueryAllChainResponse, error)
	// Queries a list of GenesisAccount items.
	GetGenesisAccount(context.Context, *QueryGetGenesisAccountRequest) (*QueryGetGenesisAccountResponse, error)
	ListGenesisAccount(context.Context, *QueryAllGenesisAccountRequest) (*QueryAllGenesisAccountResponse, error)
	// Queries a list of GenesisValidator items.
	GetGenesisValidator(context.Context, *QueryGetGenesisValidatorRequest) (*QueryGetGenesisValidatorResponse, error)
	ListGenesisValidator(context.Context, *QueryAllGenesisValidatorRequest) (*QueryAllGenesisValidatorResponse, error)
	// Queries a list of VestingAccount items.
	GetVestingAccount(context.Context, *QueryGetVestingAccountRequest) (*QueryGetVestingAccountResponse, error)
	ListVestingAccount(context.Context, *QueryAllVestingAccountRequest) (*QueryAllVestingAccountResponse, error)
	// Queries a list of Request items.
	GetRequest(context.Context, *QueryGetRequestRequest) (*QueryGetRequestResponse, error)
	ListRequest(context.Context, *QueryAllRequestRequest) (*QueryAllRequestResponse, error)
	ListParamChange(context.Context, *QueryAllParamChangeRequest) (*QueryAllParamChangeResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetChain(context.Context, *QueryGetChainRequest) (*QueryGetChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedQueryServer) ListChain(context.Context, *QueryAllChainRequest) (*QueryAllChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChain not implemented")
}
func (UnimplementedQueryServer) GetGenesisAccount(context.Context, *QueryGetGenesisAccountRequest) (*QueryGetGenesisAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisAccount not implemented")
}
func (UnimplementedQueryServer) ListGenesisAccount(context.Context, *QueryAllGenesisAccountRequest) (*QueryAllGenesisAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenesisAccount not implemented")
}
func (UnimplementedQueryServer) GetGenesisValidator(context.Context, *QueryGetGenesisValidatorRequest) (*QueryGetGenesisValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisValidator not implemented")
}
func (UnimplementedQueryServer) ListGenesisValidator(context.Context, *QueryAllGenesisValidatorRequest) (*QueryAllGenesisValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenesisValidator not implemented")
}
func (UnimplementedQueryServer) GetVestingAccount(context.Context, *QueryGetVestingAccountRequest) (*QueryGetVestingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVestingAccount not implemented")
}
func (UnimplementedQueryServer) ListVestingAccount(context.Context, *QueryAllVestingAccountRequest) (*QueryAllVestingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVestingAccount not implemented")
}
func (UnimplementedQueryServer) GetRequest(context.Context, *QueryGetRequestRequest) (*QueryGetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedQueryServer) ListRequest(context.Context, *QueryAllRequestRequest) (*QueryAllRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequest not implemented")
}
func (UnimplementedQueryServer) ListParamChange(context.Context, *QueryAllParamChangeRequest) (*QueryAllParamChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParamChange not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChain(ctx, req.(*QueryGetChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListChain(ctx, req.(*QueryAllChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGenesisAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGenesisAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGenesisAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetGenesisAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGenesisAccount(ctx, req.(*QueryGetGenesisAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGenesisAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGenesisAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGenesisAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListGenesisAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGenesisAccount(ctx, req.(*QueryAllGenesisAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGenesisValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGenesisValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGenesisValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetGenesisValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGenesisValidator(ctx, req.(*QueryGetGenesisValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGenesisValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGenesisValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGenesisValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListGenesisValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGenesisValidator(ctx, req.(*QueryAllGenesisValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVestingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVestingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVestingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetVestingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVestingAccount(ctx, req.(*QueryGetVestingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListVestingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVestingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListVestingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListVestingAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListVestingAccount(ctx, req.(*QueryAllVestingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRequest(ctx, req.(*QueryGetRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRequest(ctx, req.(*QueryAllRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListParamChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllParamChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListParamChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListParamChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListParamChange(ctx, req.(*QueryAllParamChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.launch.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _Query_GetChain_Handler,
		},
		{
			MethodName: "ListChain",
			Handler:    _Query_ListChain_Handler,
		},
		{
			MethodName: "GetGenesisAccount",
			Handler:    _Query_GetGenesisAccount_Handler,
		},
		{
			MethodName: "ListGenesisAccount",
			Handler:    _Query_ListGenesisAccount_Handler,
		},
		{
			MethodName: "GetGenesisValidator",
			Handler:    _Query_GetGenesisValidator_Handler,
		},
		{
			MethodName: "ListGenesisValidator",
			Handler:    _Query_ListGenesisValidator_Handler,
		},
		{
			MethodName: "GetVestingAccount",
			Handler:    _Query_GetVestingAccount_Handler,
		},
		{
			MethodName: "ListVestingAccount",
			Handler:    _Query_ListVestingAccount_Handler,
		},
		{
			MethodName: "GetRequest",
			Handler:    _Query_GetRequest_Handler,
		},
		{
			MethodName: "ListRequest",
			Handler:    _Query_ListRequest_Handler,
		},
		{
			MethodName: "ListParamChange",
			Handler:    _Query_ListParamChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/launch/v1/query.proto",
}
