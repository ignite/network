syntax = "proto3";

package network.monitoringp.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "network/monitoringp/v1/connection_channel_id.proto";
import "network/monitoringp/v1/consumer_client_id.proto";
import "network/monitoringp/v1/monitoring_info.proto";
import "network/monitoringp/v1/params.proto";

option go_package = "github.com/ignite/network/x/monitoringp/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ignite/network/monitoringp/v1/params";
  }

  // Queries a MonitoringInfo by index.
  rpc GetMonitoringInfo(QueryGetMonitoringInfoRequest) returns (QueryGetMonitoringInfoResponse) {
    option (google.api.http).get = "/ignite/network/monitoringp/monitoring_info";
  }

  // Queries a ConnectionChannelID by index.
  rpc GetConnectionChannelID(QueryGetConnectionChannelIDRequest) returns (QueryGetConnectionChannelIDResponse) {
    option (google.api.http).get = "/ignite/network/monitoringp/connection_channel_id";
  }

  // Queries a ConsumerClientID by index.
  rpc GetConsumerClientID(QueryGetConsumerClientIDRequest) returns (QueryGetConsumerClientIDResponse) {
    option (google.api.http).get = "/ignite/network/monitoringp/consumer_client_id";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryGetMonitoringInfoRequest {}

message QueryGetMonitoringInfoResponse {
  MonitoringInfo monitoring_info = 1 [(gogoproto.nullable) = false];
}

message QueryGetConnectionChannelIDRequest {}

message QueryGetConnectionChannelIDResponse {
  ConnectionChannelID connection_channel_id = 1 [(gogoproto.nullable) = false];
}

message QueryGetConsumerClientIDRequest {}

message QueryGetConsumerClientIDResponse {
  ConsumerClientID consumer_client_id = 1 [(gogoproto.nullable) = false];
}
