syntax = "proto3";

package network.participation.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "network/participation/v1/auction_used_allocations.proto";
import "network/participation/v1/params.proto";
import "network/participation/v1/used_allocations.proto";

option go_package = "github.com/ignite/network/x/participation/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ignite/network/participation/v1/params";
  }

  // Queries a list of AuctionUsedAllocations items.
  rpc GetAuctionUsedAllocations(QueryGetAuctionUsedAllocationsRequest) returns (QueryGetAuctionUsedAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/auction_used_allocations/{address}";
  }
  rpc ListAuctionUsedAllocations(QueryAllAuctionUsedAllocationsRequest) returns (QueryAllAuctionUsedAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/auction_used_allocations";
  }

  // Queries a list of UsedAllocations items.
  rpc GetUsedAllocations(QueryGetUsedAllocationsRequest) returns (QueryGetUsedAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/used_allocations/{address}";
  }
  rpc ListUsedAllocations(QueryAllUsedAllocationsRequest) returns (QueryAllUsedAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/used_allocations";
  }

  // Queries a list of TotalAllocations items.
  rpc TotalAllocations(QueryTotalAllocationsRequest) returns (QueryTotalAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/total_allocations/{address}";
  }

  // Queries a list of AvailableAllocations items.
  rpc AvailableAllocations(QueryAvailableAllocationsRequest) returns (QueryAvailableAllocationsResponse) {
    option (google.api.http).get = "/ignite/network/participation/available_allocations/{address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryGetAuctionUsedAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 auctionID = 2;
}

message QueryGetAuctionUsedAllocationsResponse {
  AuctionUsedAllocations auctionUsedAllocations = 1 [(gogoproto.nullable) = false];
}

message QueryAllAuctionUsedAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllAuctionUsedAllocationsResponse {
  repeated AuctionUsedAllocations auctionUsedAllocations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetUsedAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryGetUsedAllocationsResponse {
  UsedAllocations usedAllocations = 1 [(gogoproto.nullable) = false];
}

message QueryAllUsedAllocationsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUsedAllocationsResponse {
  repeated UsedAllocations usedAllocations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTotalAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryTotalAllocationsResponse {
  string totalAllocations = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (cosmos_proto.scalar) = "cosmos.Int"
  ];
}

message QueryAvailableAllocationsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryAvailableAllocationsResponse {
  string availableAllocations = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (cosmos_proto.scalar) = "cosmos.Int"
  ];
}
