syntax = "proto3";

package network.launch.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "network/launch/v1/chain.proto";
import "network/launch/v1/params.proto";
import "network/launch/v1/request.proto";

option go_package = "github.com/ignite/network/x/launch/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateChain(MsgCreateChain) returns (MsgCreateChainResponse);
  rpc EditChain(MsgEditChain) returns (MsgEditChainResponse);
  rpc UpdateLaunchInformation(MsgUpdateLaunchInformation) returns (MsgUpdateLaunchInformationResponse);
  rpc SendRequest(MsgSendRequest) returns (MsgSendRequestResponse);
  rpc SettleRequest(MsgSettleRequest) returns (MsgSettleRequestResponse);
  rpc TriggerLaunch(MsgTriggerLaunch) returns (MsgTriggerLaunchResponse);
  rpc RevertLaunch(MsgRevertLaunch) returns (MsgRevertLaunchResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "network/x/launch/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateChain {
  option (cosmos.msg.v1.signer) = "coordinator";
  string coordinator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string genesisChainID = 2;
  string sourceURL = 3;
  string sourceHash = 4;
  InitialGenesis initialGenesis = 5 [(gogoproto.nullable) = false];
  bool hasProject = 6;
  uint64 projectID = 7;
  repeated cosmos.base.v1beta1.Coin accountBalance = 8 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  bytes metadata = 9;
}

message MsgCreateChainResponse {
  uint64 launchID = 1;
}

message MsgEditChain {
  option (cosmos.msg.v1.signer) = "coordinator";
  string coordinator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
  bool setProjectID = 3;
  uint64 projectID = 4;
  bytes metadata = 5;
}

message MsgEditChainResponse {}

message MsgUpdateLaunchInformation {
  option (cosmos.msg.v1.signer) = "coordinator";
  string coordinator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
  string genesisChainID = 3;
  string sourceURL = 4;
  string sourceHash = 5;
  InitialGenesis initialGenesis = 6;
}

message MsgUpdateLaunchInformationResponse {}

message MsgSendRequest {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
  RequestContent content = 3 [(gogoproto.nullable) = false];
}

message MsgSendRequestResponse {
  uint64 requestID = 1;
  bool autoApproved = 2;
}

message MsgSettleRequest {
  option (cosmos.msg.v1.signer) = "signer";
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
  uint64 requestID = 3;
  bool approve = 4;
}

message MsgSettleRequestResponse {}

message MsgTriggerLaunch {
  option (cosmos.msg.v1.signer) = "coordinator";
  string coordinator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
  google.protobuf.Timestamp launchTime = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message MsgTriggerLaunchResponse {}

message MsgRevertLaunch {
  option (cosmos.msg.v1.signer) = "coordinator";
  string coordinator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 launchID = 2;
}

message MsgRevertLaunchResponse {}
